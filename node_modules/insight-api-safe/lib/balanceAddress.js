"use strict";
var Common = require('./common');

/**
 * 资产排名数据获取接口
 * @param {*} node : bitcored.js
 */
function BalanceAddressController(node) {
    this.node = node;
    this.common = new Common({log: this.node.log});
}

BalanceAddressController.prototype.getRanking = function( req, res ){
    var self = this;
    var option = {
        start: (req.query.page) * 10 - 10,
    };
    if (this.checkParams(option)) {
        return self.common.handleErrors({message: "params error！"}, res);
    }
    self.node.getBalanceRanking( option , function( err , list ){
        if ( err ){
            return self.common.handleErrors(err, res);
        }
        return res.jsonp({
            list:list,
            more:1000 > option.start * 10,
            maxPage: Math.ceil(1000 / 10)
        });
    } )
}

BalanceAddressController.prototype.getAmountStatistic = function( req , res ){
    var self = this;
    self.node.getAmountStatistic( function( err , result ){
        if ( err ){
            return self.common.handleErrors(err, res);
        }
        return res.jsonp(result[0]);
    } )
}

BalanceAddressController.prototype.getStatistic = function( req , res ){
    var self = this;
    self.node.getStatistic( function( err , result ){
        if ( err ){
            return self.common.handleErrors(err, res);
        }
        var totalAmount = result[0].total_amount;    // 总量
        var flow = result[0].total_flow_amount + result[0].total_locked_amount;
        var data = {
            supply:totalAmount / Math.pow( 10,8 ),
            circulation:flow / Math.pow( 10,8 ),
            address_count:result[0].address_count,
            address_0_count:result[0].address_0_count,
        }
        return res.jsonp(data);
    } )
}

BalanceAddressController.prototype.getCirculatingSupply = function( req , res ){
    var self = this;
    self.node.getStatistic( function( err , result ){
        if ( err ){
            return self.common.handleErrors(err, res);
        }
        var flow = result[0].total_flow_amount + result[0].total_locked_amount;
        var teamLockedAmount = result[0].team_locked_amount;
        var bc = (flow - teamLockedAmount) / Math.pow( 10,8 )
        return res.jsonp(bc);
    } )
}

/**
 * 非小号查询前100数据
 * @param {*} req 
 * @param {*} res 
 */
BalanceAddressController.prototype.getTop100 = function( req , res ){
    var self = this;
    self.node.getTop100( function( err , result ){
        if ( err ){
            return self.common.handleErrors(err, res);
        }
        result.list.forEach( addressBalance => {
            addressBalance.balance = addressBalance.balance / Math.pow( 10,8 );
        });
        return res.jsonp(result);
    } )
}



BalanceAddressController.prototype.checkParams = function (params) {
    var keys = Object.keys(params);
    var flag = false;
    //DECLARE  EXEC 判断是否出现这些字符 如果出现直接返回
    for (var i = 0; i < keys.length; i++) {
        if (keys[i] == "start" || isNaN(params[keys[i]])) {
            continue;
        }
        if (params[keys[i]] == "assetName") {
            if ((params[keys[i]] == "DECLARE" || params[keys[i]] == "EXEC(")) {
                continue;
            }
        }
        if (params[keys[i]].indexOf("DECLARE") || params[keys[i]].indexOf("EXEC(")) {
            flag = true;
        }
    }
    return flag;
};

module.exports = BalanceAddressController;