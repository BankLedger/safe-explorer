// Source: public/src/js/app.js
var defaultLanguage = localStorage.getItem('insight-language') || 'zh_CN';
// var defaultLanguageCode = localStorage.getItem('insight-languageCode') || 'Chinese';
var defaultLanguageCode = localStorage.getItem('insight-languageCode') || '中文';
var defaultCurrency = localStorage.getItem('insight-currency') || 'SAFE';

var app = angular.module('insight', [
    'ngAnimate',
    'ngResource',
    'ngRoute',
    'ngProgress',
    'ui.bootstrap',
    'ui.route',
    'monospaced.qrcode',
    'gettext',
    'angularMoment',
    'angular-echarts',  // 数据可视化依赖 echarts 
    'insight.system',
    'insight.socket',
    'insight.blocks',
    'insight.transactions',
    'insight.address',
    'insight.search',
    'insight.status',
    'insight.connection',
    'insight.currency',
    'insight.messages',
    'insight.masternode',
    'insight.assets',
    'insight.masternodeMobile',
    'insight.ModalInstanceController',
    'insight.lockedAddress',
    'insight.lockedDetail',
    'insight.unlockHeight',
    'insight.balanceRanking',
    'insight.amountStatistic',
    'insight.addressLabel',
]);

angular.module('insight.system', []);
angular.module('insight.socket', []);
angular.module('insight.blocks', []);
angular.module('insight.transactions', []);
angular.module('insight.address', []);
angular.module('insight.search', []);
angular.module('insight.status', []);
angular.module('insight.connection', []);
angular.module('insight.currency', []);
angular.module('insight.messages', []);
angular.module('insight.masternode', []);
angular.module('insight.assets', []);
angular.module('insight.masternodeMobile', []);
angular.module('insight.ModalInstanceController', []);
angular.module('insight.lockedAddress', []);
angular.module('insight.lockedDetail', []);
angular.module('insight.unlockHeight', []);
angular.module('insight.balanceRanking', []);
angular.module('insight.amountStatistic', []);
angular.module('insight.addressLabel', []);

// 添加全局配置信息 宝石通知资产ID
var config = {
    pow: {
        // 产块速度 一个块/每秒
        blockedSpeed: 150
    },
    // 这里以后用来放 SPOS 的相关配置
    spos: {
        // SPOS 共识算法生效高度
        height: 1092826 ,
        // 产块速度 一个块/每秒
        blockedSpeed: 30 , 
        // 每个区块挖矿奖励
        blockedReward: 0.53573464,
    } , 
    address_label:{
        BLOCK_HOLE_ADDRESS : 'XagqqFetxiDb9wbartKDrXgnqLah6SqX2S' , 
        APP_DESTORY_ADDRESS: 'XagqqFetxiDb9wbartKDrXgnqLah9fKoTx' ,
    }
}

const format = {
    numberFormat8:function( number ){
        return number / Math.pow( 10,8 )
    } , 
    amountFormat2:function( number ){
       /*
        * 参数说明：
        * number：要格式化的数字
        * decimals：保留几位小数
        * dec_point：小数点符号
        * thousands_sep：千分位符号
        * */
        const decimals = 2;
        number = (number + '').replace(/[^0-9+-Ee.]/g, '');
        var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = ',',
            dec = '.',
            s = '',
            toFixedFix = function (n, prec) {
                var k = Math.pow(10, prec);
                return '' + Math.floor(n * k) / k;
            };
        s = (prec ? toFixedFix(n, prec) : '' + Math.floor(n)).split('.');
        var re = /(-?\d+)(\d{3})/;
        while (re.test(s[0])) {
            s[0] = s[0].replace(re, "$1" + sep + "$2");
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }
}

app.constant( 'config' , config );
app.constant( 'format' , format );



// Source: public/src/js/controllers/address.js
angular.module('insight.address').controller('AddressController',
    function ($scope, $rootScope, $routeParams, $location, Global, Address, getSocket , AddressLabel) {
        $scope.global = Global;
        $scope.AddressLabel = AddressLabel;
        $scope.loading = true;

        var socket = getSocket($scope);
        var addrStr = $routeParams.addrStr;
        var assetId = $routeParams.assetId;
        var _startSocket = function () {
            socket.on('bitcoind/addresstxid', function (data) {
                if (data.address === addrStr) {
                    $rootScope.$broadcast('tx', data.txid);
                    // var base = document.querySelector('base');
                    // var beep = new Audio(base.href + '/sound/transaction.mp3');
                    // beep.play();
                }
            });
            socket.emit('subscribe', 'bitcoind/addresstxid', [addrStr]);
        };

        var _stopSocket = function () {
            socket.emit('unsubscribe', 'bitcoind/addresstxid', [addrStr]);
        };

        socket.on('connect', function () {
            _startSocket();
        });

        $scope.$on('$destroy', function () {
            _stopSocket();
        });
        $scope.params = $routeParams;
        $scope.findOne = function () {
            $rootScope.currentAddr = addrStr;
            _startSocket();
            Address.get({
                    addrStr: $routeParams.addrStr,
                    assetsId: assetId || ""
                },
                function (address) {
                    var shortName = " SAFE";
                    if (assetId) {
                        for (var i = 0; i < address.assets.length; i++) {
                            if (address.assets[i].assetId == assetId) {
                                shortName = " " + address.assets[i].shortName;
                                break;
                            }
                        }
                    }
                    address.assets.unshift({
                        "shortName": "SAFE",
                        "assetId": ""
                    });
                    $scope.address = address;
                    $scope.assetId = assetId;
                    $scope.shortName = shortName;
                    $scope.loading = false;
                },
                function (e) {
                    if (e.status === 400) {
                        $rootScope.flashMessage = 'Invalid Address: ' + $routeParams.addrStr;
                    } else if (e.status === 503) {
                        $rootScope.flashMessage = 'Backend Error. ' + e.data;
                    } else {
                        $rootScope.flashMessage = 'Address Not Found';
                    }
                    $location.path('/');
                });
        };

        //跳转界面
        $scope.addressGetTxByAssetsId = function () { //根据资产id显示当前地址的资产交易
            var assetId = $scope.assetsId;
            if (!assetId)
                assetId = "all";
            $location.path('/addressAssets/' + addrStr + '/' + assetId);
        };
        //获取资产id
        $scope.$watch("assetsId", function (assetsId) {
            $scope.assetsId = assetsId;
        })
    });
// Source: public/src/js/controllers/amountStatistic.js
angular.module('insight.amountStatistic').controller('AmountStatisticController',
  function($scope, $routeParams, $location, Global, AmountStatistic , config) {
    $scope.global = Global;
    $scope.getAmountStatistic = function(){
      AmountStatistic.get( {} , function( data ){
        /*
          显示币总量、                      29400000
          未挖出数量、		                  29400000 - 所有地址的余额
            流通数量、                      所有地址的余额 - (
					                                      黑洞地址[XagqqFetxiDb9wbartKDrXgnqLah6SqX2S]余额数量 , 
                                                安资销毁地址[XagqqFetxiDb9wbartKDrXgnqLah9fKoTx]余额数量 
                                            )
            锁定数量、                      所有地址的锁定余额 (到期后扣减，更新到流通数量中)
        真实流通数量、                      流通数量 - 锁定数量
主节点数量/抵押在主节点币数量、               rpc-masternodelist 返回节点列表并统计数量 /  数量 * 1000

        主节点已解锁交易数量                 就是主节点列表中交易，它已经解锁了，但依然作为主节点保持着
        未抵押和锁定数量                     真实流通量 - (已解锁交易数量 * 1000)

        */
        data.unminedAmount = data.totalAmount - data.totalAddressAmount;
        data.flowAmount    = data.totalAddressAmount - data.totalDestoryAmount;
        data.masternodeAmount = data.masternodeCount * 1000;

        // 未抵押和锁定数量  
        data.unlockedAndMortgageAmount = data.totalFlowAmount - ( data.masternodeUnlockTxCount * 1000 * Math.pow( 10 ,8 ) )

        var speed = config.spos.blockedSpeed;
        var reward = config.spos.blockedReward;
        var minitueSupply = 60 / speed ;
        var daySupply = minitueSupply * 60 * 24 ;
        var monthSupply = daySupply * 30;
        var yearSupply = monthSupply * 12;

        data.supply = {
          day: daySupply,
          dayAmount: daySupply * reward,
          month: monthSupply ,
          monthAmount: monthSupply * reward,
          year: yearSupply ,
          yearAmount: yearSupply * reward,
        };
        $scope.statistic = data;
      } )
    }
    $scope.formatNumber8 = function( num ){
      return  parseFloat(parseFloat(
          parseFloat(num) / Math.pow( 10 ,8 )
      ).toFixed(8));
    }
    $scope.amountformat = function( number ){
       /*
        * 参数说明：
        * number：要格式化的数字
        * decimals：保留几位小数
        * dec_point：小数点符号
        * thousands_sep：千分位符号
        * */
        const decimals = 2;
        number = (number + '').replace(/[^0-9+-Ee.]/g, '');
        var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = ',',
            dec = '.',
            s = '',
            toFixedFix = function (n, prec) {
                var k = Math.pow(10, prec);
                return '' + Math.floor(n * k) / k;
            };
        s = (prec ? toFixedFix(n, prec) : '' + Math.floor(n)).split('.');
        var re = /(-?\d+)(\d{3})/;
        while (re.test(s[0])) {
            s[0] = s[0].replace(re, "$1" + sep + "$2");
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }
  });

// Source: public/src/js/controllers/assets.js
angular.module('insight.assets').controller('AssetsController',
    function ($scope, $rootScope, $routeParams, $location, Global, AssetsList, AssetsbyId, getAssetsTranasction, getAssetsTxForAll) {
        var jumpPage = 0;
        var thisPage = 0;
        var displayLength = 7;     //分页的数量控制
        $scope.loading = true;
        $scope.maxPage = 1;

        $scope.list = function (page) { //默认显示所有
            if (page > $scope.maxPage) {
                return;
            } else if (page < 1) {
                return;
            } else if (thisPage == page) {
                return;
            }
            var name = $routeParams.name;
            thisPage = page;
            AssetsList.get({pageNum: page, name: name}, function (assets) {
                $scope.pageBut = [];
                $scope.pageButM = [];
                $scope.assets = assets.list;
                $scope.more = assets.more;
                $scope.maxPage = assets.maxPage;
                setPageButs(page, assets.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });
                $scope.loading = false;
                $scope.prePage = page - 1;
                $scope.nextPage = page + 1;
            })
        };

        function setPageButs(page, maxPage, cb) {
            var startPage = Math.round(page - displayLength / 2 + 1);
            var endPage = Math.round(page + displayLength / 2);
            if (startPage <= 1) {
                startPage = 1;
                endPage = startPage + displayLength - 1;
                if (endPage >= maxPage - 1) {
                    endPage = maxPage - 1;
                }
            }
            if (endPage >= maxPage - 1) {
                endPage = maxPage;
                startPage = maxPage - displayLength + 1;
                if (startPage <= 1) {
                    startPage = 1;
                }
            }
            cb(startPage, endPage);
        }

        $scope.findOne = function () {
            AssetsbyId.get({assetsId: $routeParams.assetsId}, function (assetsObj) {
                $scope.assets = assetsObj;
                $scope.loading = false;
            })
        };

        $scope.$watch('jumpPage', function (page) {     //绑定控件元素值
            jumpPage = parseInt(page) || 0;
            if (jumpPage > $scope.maxPage) {
                window.document.getElementById("jumpInput").value = $scope.maxPage;
            } else if (jumpPage < 1) {
                if (window.document.getElementById("jumpInput")) {
                    window.document.getElementById("jumpInput").value = 1;
                }
            }
        });

        $scope.inputOnChange = function () {
            var page = window.document.getElementById("jumpInput").value;
            jumpPage = parseInt(page) || 0;
            if (jumpPage > $scope.maxPage) {
                window.document.getElementById("jumpInput").value = $scope.maxPage;
            } else if (jumpPage < 1) {
                if (window.document.getElementById("jumpInput")) {
                    window.document.getElementById("jumpInput").value = 1;
                }
            }
        };

        $scope.jumpPageBut = function (type) {  //分页
            if (jumpPage > 0 && thisPage != jumpPage) {
                if (jumpPage > $scope.maxPage) {
                    jumpPage = parseInt($scope.maxPage);
                }
                if (type == "list") {
                    $scope.list(jumpPage);
                } else if (type == "detail") {
                    $scope.getAssetsTxAllList(jumpPage);
                }
            }
        };


        $scope.ExpandedTxID = true;
        $scope.ExpandedAddr = true;
        $scope.ExpandedSpon = true;

        // 获取资产所有交易 ======================================================================
        $scope.getAssetsTxAllList = function (page) {
            if (page > $scope.maxPage) {
                return;
            } else if (page < 1) {
                return;
            } else if (thisPage == page) {
                return;
            }
            thisPage = page;

            $scope.loading = true;
            getAssetsTxForAll.get({
                assetsId: $routeParams.assetsId,
                page: page
            }, function (assetsTxObj) {
                $scope.pageBut = [];
                $scope.pageButM = [];
                $scope.maxPage = assetsTxObj.maxPage;
                setPageButs(page, assetsTxObj.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });
                $scope.assetsAllList = [];
                assetsTxObj.list.forEach(function (v) {
                    v.totalIssued = convertNum(v.totalIssued)
                });

                $scope.loading = false;
                $scope.assetsAllList = assetsTxObj.list;
                $scope.more = assetsTxObj.more;
                $scope.prePage = page - 1;
                $scope.nextPage = page + 1;
            })
        };

        function convertNum(amount) {
            // 判断是否科学计数法,是则进行转换
            var num = 0;
            var result = [];
            if ((amount.indexOf('E') != -1) || (amount.indexOf('e') != -1)) {
                (amount.indexOf('E') != -1) ? num = amount.indexOf('E') : num = amount.indexOf('e');
                var decimal = amount.substr(0, num);
                // devide the sentice efficial number
                var decArr = decimal.split('.', 2);
                // total 10 power
                var power = amount.substr(num + 1, amount.length);
                // symbol + -
                var symbol = power.substr(0, 1);
                power = power.substr(1, power.length);
                power = power * 1.0;
                if ('+' == symbol) {
                    // the number of 0 is power - decArr[1]
                    power = power - decArr[1].length;
                    // the return data
                    while (power > 0) {
                        result.unshift(0);
                        power -= 1;
                    }
                    result.unshift(decArr[1] * 1.0);
                    result.unshift(decArr[0] * 1.0);
                } else {
                    if (decArr[1]) {
                        power = power - decArr[1].length;
                    }
                    power--;
                    var result = [0];
                    result.push('.');
                    while (power > 0) {
                        result.push(0);
                        power -= 1;
                    }
                    result.push(decArr);
                }
                result.join("");
                result = result + '';
                amount = result.replace(/,/g, '');
            }
            return amount;
        }
    });
// Source: public/src/js/controllers/blocks.js
angular.module('insight.blocks').controller('BlocksController',
    function ($scope, $rootScope, $routeParams, $location, Global, Block, Blocks, BlockByHeight) {
        $scope.global = Global;
        $scope.loading = false;
        if ($routeParams.blockHeight) {
            BlockByHeight.get({
                blockHeight: $routeParams.blockHeight
            }, function (hash) {
                $location.path('/block/' + hash.blockHash);
            }, function () {
                $rootScope.flashMessage = 'Bad Request';
                $location.path('/');
            });
        }

        //Datepicker
        var _formatTimestamp = function (date) {
            var yyyy = date.getFullYear().toString();
            var mm = (date.getMonth() + 1).toString(); // getMonth() is zero-based
            var dd = date.getDate().toString();
            return yyyy + '-' + (mm[1] ? mm : '0' + mm[0]) + '-' + (dd[1] ? dd : '0' + dd[0]); //padding
        };

        $scope.$watch('dt', function (newValue, oldValue) {
            if (newValue !== oldValue) {
                $location.path('/blocks-date/' + _formatTimestamp(newValue));
            }
        });

        $scope.openCalendar = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.opened = true;
        };

        $scope.humanSince = function (time) {
            var m = moment.unix(time).startOf('day');
            var b = moment().startOf('day');
            return m.max().from(b);
        };

        $scope.list = function () {
            $scope.loading = true;
            var blockDate = $routeParams.blockDate;
            var todayTimestamp = new Date().getTime();
            var parmasTimestamp = new Date(blockDate).getTime();
            if (parmasTimestamp > todayTimestamp) {
                blockDate = _formatTimestamp(new Date());
            }
            var startTimestamp = $routeParams.startTimestamp * 1000;
            if (startTimestamp > parmasTimestamp + 24 * 60 * 60 * 1000) {
                startTimestamp = parmasTimestamp + 16 * 60 * 60 * 1000 - 1;
            }

            if (blockDate) {
                $scope.detail = blockDate;
            }
            if (startTimestamp) {
                var d = new Date(startTimestamp);
                var m = d.getMinutes();
                if (m < 10) m = '0' + m;
                $scope.before = ' before ' + d.getHours() + ':' + m;
            }
            $rootScope.titleDetail = $scope.detail;
            Blocks.get({
                blockDate: blockDate,
                startTimestamp: parseInt(startTimestamp / 1000)
            }, function (res) {
                $scope.loading = false;
                $scope.blocks = res.blocks;
                $scope.pagination = res.pagination;
            });
        };

        $scope.findOne = function () {
            $scope.loading = true;
            Block.get({
                blockHash: $routeParams.blockHash
            }, function (block) {
                $rootScope.titleDetail = block.height;
                $rootScope.flashMessage = null;
                $scope.loading = false;
                $scope.block = block;
            }, function (e) {
                if (e.status === 400) {
                    $rootScope.flashMessage = 'Invalid Transaction ID: ' + $routeParams.txId;
                }
                else if (e.status === 503) {
                    $rootScope.flashMessage = 'Backend Error. ' + e.data;
                }
                else {
                    $rootScope.flashMessage = 'Block Not Found';
                }
                $location.path('/');
            });
        };
        $scope.params = $routeParams;
    });
// Source: public/src/js/controllers/connection.js
angular.module('insight.connection').controller('ConnectionController',
    function ($scope, $window, Status, getSocket, PeerSync) {

        // Set initial values
        $scope.apiOnline = true;
        $scope.serverOnline = true;
        $scope.clienteOnline = true;

        var socket = getSocket($scope);

        // Check for the node server connection
        socket.on('connect', function () {
            $scope.serverOnline = true;
            socket.on('disconnect', function () {
                $scope.serverOnline = false;
            });
        });

        // Check for the  api connection
        $scope.getConnStatus = function () {
            PeerSync.get({},
                function (peer) {
                    $scope.apiOnline = peer.connected;
                    $scope.host = peer.host;
                    $scope.port = peer.port;
                },
                function () {
                    $scope.apiOnline = false;
                });
        };

        socket.emit('subscribe', 'sync');
        socket.on('status', function (sync) {
            $scope.sync = sync;
            $scope.apiOnline = (sync.status !== 'aborted' && sync.status !== 'error');
        });

        // Check for the client conneciton
        $window.addEventListener('offline', function () {
            $scope.$apply(function () {
                $scope.clienteOnline = false;
            });
        }, true);

        $window.addEventListener('online', function () {
            $scope.$apply(function () {
                $scope.clienteOnline = true;
            });
        }, true);

    });

// Source: public/src/js/controllers/currency.js
angular.module('insight.currency').controller('CurrencyController',
    function ($scope, $rootScope, Currency) {
        $rootScope.currency.symbol = defaultCurrency;

        var _roundFloat = function (x, n) {
            if (!parseInt(n, 10) || !parseFloat(x)) n = 0;

            return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);
        };

        $rootScope.currency.getConvertion = function (value) {
            value = value * 1; // Convert to number

            if (!isNaN(value) && typeof value !== 'undefined' && value !== null) {
                if (value === 0.00000000) return '0 ' + this.symbol; // fix value to show
                var response;
                if (this.symbol === 'USD') {
                    response = _roundFloat((value * this.factor), 2);
                } else if (this.symbol === 'mSAFE') {
                    this.factor = 1000;
                    response = _roundFloat((value * this.factor), 5);
                } else if (this.symbol === 'uSAFE') {
                    this.factor = 1000000;
                    response = _roundFloat((value * this.factor), 2);
                } else {
                    this.factor = 1;
                    response = value;
                }
                // prevent sci notation
                if (response < 1e-7) response = response.toFixed(8);
                return response + ' ' + this.symbol;
            }
            return 'value error';
        };

        $scope.setCurrency = function (currency) {
            $rootScope.currency.symbol = currency;
            localStorage.setItem('insight-currency', currency);

            if (currency === 'USD') {
                Currency.get({}, function (res) {
                    $rootScope.currency.factor = $rootScope.currency.bitstamp = res.data.bitstamp;
                });
            } else if (currency === 'mSAFE') {
                $rootScope.currency.factor = 1000;
            } else if (currency === 'uSAFE') {
                $rootScope.currency.factor = 1000000;
            } else {
                $rootScope.currency.factor = 1;
            }
        };

        // Get initial value
        Currency.get({}, function (res) {
            $rootScope.currency.factor = $rootScope.currency.bitstamp = res.data.bitstamp;
        });

    });

// Source: public/src/js/controllers/footer.js
angular.module('insight.system').controller('FooterController',
    function ($scope, $route, $templateCache, gettextCatalog, amMoment, Version) {
        $scope.defaultLanguage = defaultLanguage;
        $scope.Language = defaultLanguageCode;

        var _getVersion = function () {
            Version.get({},
                function (res) {
                    $scope.version = res.version;
                });
        };

        $scope.version = _getVersion();

        $scope.availableLanguages = [{
            //     name: 'Deutsch',
            //     isoCode: 'de_DE',
            // }, {
            name: 'English',
            isoCode: 'en'
        }, {
            // name: 'Spanish',
            // isoCode: 'es',
            // }, {
            //     name: 'Chinese',
            name: '中文',
            isoCode: 'zh_CN'
            // },{
            //     name: 'Japanese',
            //     isoCode: 'ja',
        }];

        $scope.setLanguage = function (isoCode, luang) {
            gettextCatalog.currentLanguage = $scope.defaultLanguage = defaultLanguage = isoCode;
            $scope.Language = defaultLanguageCode = luang;
            amMoment.changeLocale(isoCode);
            localStorage.setItem('insight-language', isoCode);
            localStorage.setItem('insight-languageCode', luang);
            var currentPageTemplate = $route.current.templateUrl;
            $templateCache.remove(currentPageTemplate);
            $route.reload();
        };
    });

// Source: public/src/js/controllers/header.js
angular.module('insight.system').controller('HeaderController',
    function ($scope, $rootScope, $modal, getSocket, Global, Block) {
        $scope.global = Global;

        $rootScope.currency = {
            factor: 1,
            bitstamp: 0,
            symbol: 'SAFE'
        };

        $scope.menu = [{
            'title': 'Blocks',
            'link': 'blocks'
        }, {
            'title': 'Masternodes',
            'link': 'MasterNode'
        }, {
            'title': 'Asset',
            'link': 'Assets'
        },{
            "title":"Rankings",
            "link" : "rankings"
        }, {
            'title': 'Status',
            'link': 'status'
        }];

        $scope.openScannerModal = function () {
            var modalInstance = $modal.open({
                templateUrl: 'scannerModal.html',
                controller: 'ScannerController'
            });
        };

        var _getBlock = function (hash) {
            Block.get({
                blockHash: hash
            }, function (res) {
                $scope.totalBlocks = res.height;
            });
        };

        var socket = getSocket($scope);
        socket.on('connect', function () {
            socket.emit('subscribe', 'inv');

            socket.on('block', function (block) {
                var blockHash = block.toString();
                _getBlock(blockHash);
            });
        });

        $rootScope.isCollapsed = true;
    });

// Source: public/src/js/controllers/index.js
var TRANSACTION_DISPLAYED = 10;
var BLOCKS_DISPLAYED = 5;

angular.module('insight.system').controller('IndexController',
    function ($scope, Global, getSocket, Blocks , AmountStatistic , format) {
        $scope.global = Global;

        var _getBlocks = function () {
            Blocks.get({
                limit: BLOCKS_DISPLAYED
            }, function (res) {
                $scope.blocks = res.blocks;
                $scope.blocksLength = res.length;
            });
        };
        
        var _getAmountStatistic = function(){
            AmountStatistic.get( {} , function( data ){
                var flowAmount = data.totalAddressAmount - data.totalDestoryAmount;
                $scope.flowAmount = format.amountFormat2( format.numberFormat8(flowAmount) ) ;
            });
        };

        var socket = getSocket($scope);

        var _startSocket = function () {
            socket.emit('subscribe', 'inv');
            socket.on('tx', function (tx) {
                $scope.txs.unshift(tx);
                if (parseInt($scope.txs.length, 10) >= parseInt(TRANSACTION_DISPLAYED, 10)) {
                    $scope.txs = $scope.txs.splice(0, TRANSACTION_DISPLAYED);
                }
            });
            socket.on('block', function () {
                _getBlocks();
                _getAmountStatistic();
            });
        };

        socket.on('connect', function () {
            _startSocket();
        });

        $scope.humanSince = function (time) {
            var m = moment.unix(time);
            return m.max().fromNow();
        };

        $scope.index = function () {
            _getBlocks();
            _startSocket();
            _getAmountStatistic();
        };

        $scope.txs = [];
        $scope.blocks = [];
    });

// Source: public/src/js/controllers/lockedAddress.js
angular.module('insight.lockedAddress').controller('lockedAddressController',
    function ($scope, $rootScope, LockedAddress, LockedTransaction, LockedAssetName , UnlockHeight , BalanceRanking ) {//$routeParams, $location, Global

        $rootScope.UnlockHeight = UnlockHeight;

        // 锁定地址分页
        var thisAddressPage = 1;
        var jumpAddressPage = 0;
        //锁定交易分页
        var thisTransactionPage = 1;
        var jumpTransactionPage = 0;
        // 资产排行分页
        var thisRankingPage = 1;
        var jumpRankingPage = 0;

        $scope.ExpandedTxID = true;
        $scope.ExpandedMobile = true;
        $scope.ExpandedaddrID = true;
        $scope.assetSearchDiv = false;
        $scope.thisAssetName = "safe";
        var isTransactionTable = false;
        var firstGetAssetNameTime = 0;
        var allAssetNameList = [];


        // 初始显示 Tab ..
        $scope.addressLockedTabClass = "hideElement";
        $scope.txLockedListConentClass = "hideElement";
        $scope.balanceRankingTabClass = "active";

        //分页的数量控制
        var displayLength = 7;
        $scope.address = {
            loading: true,
            maxPage: 1,
            list: [],
            order: "DESC",
            orderIcon: "↓",
            assetName: "safe"
        };
        $scope.transaction = {
            loading: true,
            maxPage: 1,
            list: [],
            orderMoney: "DESC",
            orderMoneyIcon: "↓",
            orderTime: "DESC",
            orderTimeIcon: "↓",
            orderHeight: "DESC",
            orderHeightIcon: "↓",
            order: "Money",
            assetName: ""
        };
        // 初始化排序页面数据
        $scope.ranking = {
            loading: true,
            maxPage: 1,
            list: [],
        };

        $scope.assetNameList = [];
        var orderColumn = "Money";
        // address locked function start
        $scope.LockedAddressList = function (page, flag) {

            $scope.addressLockedTabClass = "active";
            $scope.addressLockedConentClass = "";
            $scope.txLockedListTabClass = "";
            $scope.txLockedListConentClass = "hideElement";
            $scope.balanceRankingTabClass = "";
            $scope.balanceRankingContentClass = "hideElement";

            if (flag == "orderBy") {
                thisAddressPage = page;
            } else if (flag == "assetSwitch") {
                if ($scope.thisAssetName == $scope.address.assetName) {
                    return;
                }
                thisAddressPage = page;
            } else {
                if (flag == "true") {
                    thisAddressPage = page;
                    if ($scope.thisAssetName == $scope.address.assetName) {
                        if ($scope.address.list.length > 0) {
                            return;
                        }
                    }
                } else {
                    if (page > $scope.address.maxPage) {
                        return;
                    } else if (page < 1) {
                        return;
                    } else if (thisAddressPage == page) {
                        return;
                    }
                    thisAddressPage = page;
                }
            }
            $scope.address.loading = true;
            $scope.address.list = [];
            $scope.address.assetName = $scope.thisAssetName;
            LockedAddress.get({
                assetName: $scope.thisAssetName,
                page: page,
                orderBy: $scope.address.order
            }, function (data) {
                $scope.address.pageBut = [];
                $scope.address.pageButM = [];

                $scope.address.list = data.list;
                $scope.address.more = data.more;
                $scope.address.maxPage = data.maxPage;
                $scope.address.maxPage = data.maxPage;
                $scope.totalLocked = data.totalLocked;
                setPageButs(page, data.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.address.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.address.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });

                $scope.address.loading = false;
                $scope.address.prePage = page - 1;
                $scope.address.nextPage = page + 1;

                isTransactionTable = false;
            })
        };


        $scope.jumpAddressPageBut = function () {
            if (jumpAddressPage > 0 && thisAddressPage != jumpAddressPage) {
                if (jumpAddressPage > $scope.address.maxPage) {
                    jumpAddressPage = parseInt($scope.address.maxPage);
                }
                $scope.LockedAddressList(jumpAddressPage);
            }
        };

        $scope.$watch('jumpAddressPage', function (page) {     //绑定控件元素值
            jumpAddressPage = parseInt(page) || 0;
            if (jumpAddressPage > $scope.address.maxPage) {
                window.document.getElementById("jumpAddressInput").value = $scope.address.maxPage;
            } else if (jumpAddressPage < 1) {
                if (window.document.getElementById("jumpAddressInput")) {
                    window.document.getElementById("jumpAddressInput").value = 1;
                }
            }
        });

        $scope.addressLockedOrder = function () {
            if ($scope.address.order == 'ASC') {
                $scope.address.order = 'DESC';
                $scope.address.orderIcon = '↓';
            } else {
                $scope.address.order = 'ASC';
                $scope.address.orderIcon = '↑';
            }
            $scope.LockedAddressList(1, "orderBy");
        };
        // address locked function end

        // transaction locked function start
        $scope.LockedTransactionList = function (page, flag) {
            $scope.txLockedListTabClass = "active";
            $scope.txLockedListConentClass = "";
            $scope.addressLockedTabClass = "";
            $scope.addressLockedConentClass = "hideElement";
            $scope.balanceRankingTabClass = "";
            $scope.balanceRankingContentClass = "hideElement";
           
            if (flag == "orderBy") {
                thisTransactionPage = page;
            } else if (flag == "assetSwitch") {//todo
                if ($scope.thisAssetName == $scope.transaction.assetName) {
                    return;
                }
                thisTransactionPage = page;
            } else {
                if (flag == "true") {
                    thisTransactionPage = page;
                    if ($scope.thisAssetName == $scope.transaction.assetName) {
                        if ($scope.transaction.list.length > 0) {
                            return;
                        }
                    }
                } else {
                    if (page > $scope.transaction.maxPage) {
                        return;
                    } else if (page < 1) {
                        return;
                    } else if (thisTransactionPage == page) {
                        return;
                    }
                    thisTransactionPage = page;
                }
            }
            $scope.transaction.list = [];

            $scope.transaction.loading = true;
            $scope.transaction.assetName = $scope.thisAssetName;
            LockedTransaction.get({
                assetName: $scope.thisAssetName,
                page: page,
                order: {
                    column: orderColumn,
                    order: $scope.transaction["order" + orderColumn]
                }
            }, function (data) {
                $scope.transaction.pageBut = [];
                $scope.transaction.pageButM = [];
                $scope.transaction.list = data.list;
                $scope.transaction.more = data.more;
                $scope.transaction.maxPage = data.maxPage;
                $scope.totalLocked = data.totalLocked;
                setPageButs(page, data.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.transaction.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.transaction.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });
                $scope.transaction.loading = false;
                $scope.transaction.prePage = page - 1;
                $scope.transaction.nextPage = page + 1;

                // $scope.addressLockedTabClass = "";
                // $scope.txLockedListTabClass = "active";
                //
                // $scope.addressLockedConentClass = "hideElement";
                // $scope.txLockedListConentClass = "";
                isTransactionTable = true;
            })
        };

        $scope.BalanceRankingList = function( page , flag ){
            // HIDE ADDRESS_LOCKED
            $scope.addressLockedTabClass = "";
            $scope.addressLockedConentClass = "hideElement";
            // HIDE TX_LOCKED_LIST
            $scope.txLockedListTabClass = "";
            $scope.txLockedListConentClass = "hideElement";
            // SHOW RANKING
            $scope.balanceRankingTabClass = 'active';
            $scope.balanceRankingContentClass = '';
            BalanceRanking.get( {
                page: page
            } , function( data ){
                $scope.ranking.pageBut = [];
                $scope.ranking.pageButM = [];
                $scope.ranking.list = data.list;
                $scope.ranking.more = data.more;
                $scope.ranking.maxPage = data.maxPage;
                setPageButs(page, data.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.ranking.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.ranking.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });
                $scope.ranking.loading = false;
                $scope.ranking.prePage = page - 1;
                $scope.ranking.nextPage = page + 1;
            } );
        }

        $scope.jumpRankingPageBut = function () {
            if (jumpRankingPage > 0 && thisRankingPage != jumpRankingPage) {
                if (jumpRankingPage > $scope.ranking.maxPage) {
                    jumpRankingPage = parseInt($scope.ranking.maxPage);
                }
                $scope.BalanceRankingList(jumpRankingPage);
            }
        };
        $scope.$watch('jumpRankingPage', function (page) {     //绑定控件元素值
            jumpRankingPage = parseInt(page) || 0;
            if (jumpRankingPage > $scope.ranking.maxPage) {
                window.document.getElementById("jumpRankingInput").value = $scope.ranking.maxPage;
            } else if (jumpRankingPage < 1) {
                if (window.document.getElementById("jumpRankingInput")) {
                    window.document.getElementById("jumpRankingInput").value = 1;
                }
            }
        });

        $scope.isNotSafeRanking = function(){
            return $scope.balanceRankingTabClass !== 'active';
        }

        /**
         * 跳转按钮
         */
        $scope.jumpTransactionPageBut = function () {
            if (jumpTransactionPage > 0 && thisTransactionPage != jumpTransactionPage) {
                if (jumpTransactionPage > $scope.transaction.maxPage) {
                    jumpTransactionPage = parseInt($scope.transaction.maxPage);
                }
                $scope.LockedTransactionList(jumpTransactionPage);
            }
        };

        $scope.$watch('jumpTransactionPage', function (page) {     //绑定控件元素值
            jumpTransactionPage = parseInt(page) || 0;
            if (jumpTransactionPage > $scope.transaction.maxPage) {
                window.document.getElementById("jumpTransactionInput").value = $scope.transaction.maxPage;
            } else if (jumpTransactionPage < 1) {
                if (window.document.getElementById("jumpTransactionInput")) {
                    window.document.getElementById("jumpTransactionInput").value = 1;
                }
            }
        });
        /**
         * 切换排序方式和排序的字段
         * @param order
         */
        $scope.transactionLockedOrder = function (order) {
            orderColumn = order;
            var keys = ['Height', 'Time', 'Money'];
            keys.forEach(function (v) {
                if (order != v) {
                    $scope.transaction["order" + v] = 'DESC';
                    $scope.transaction["order" + v + "Icon"] = '↓';
                } else {
                    if ($scope.transaction["order" + v] == 'ASC') {
                        $scope.transaction["order" + v] = 'DESC';
                        $scope.transaction["order" + v + "Icon"] = '↓';
                    } else {
                        $scope.transaction["order" + v] = 'ASC';
                        $scope.transaction["order" + v + "Icon"] = '↑';
                    }
                }
            });

            $scope.LockedTransactionList(1, "orderBy");
        };

        // transaction locked function end
        /**
         * 设置分页按钮的数量和格式
         * @param page
         * @param maxPage
         * @param cb
         */
        function setPageButs(page, maxPage, cb) {
            var startPage = Math.round(page - displayLength / 2 + 1);
            var endPage = Math.round(page + displayLength / 2);
            if (startPage <= 1) {
                startPage = 1;
                endPage = startPage + displayLength - 1;
                if (endPage >= maxPage - 1) {
                    endPage = maxPage - 1;
                }
            }
            if (endPage >= maxPage - 1) {
                endPage = maxPage;
                startPage = maxPage - displayLength + 1;
                if (startPage <= 1) {
                    startPage = 1;
                }
            }
            cb(startPage, endPage);
        }

        /**
         * 将数据格式化到8位小数
         * @param num
         * @return {Number}
         */
        $scope.formatNumber = function (num) {
            return parseFloat(parseFloat(num).toFixed(8));
        };

        $scope.formatNumber8 = function( num ){
            return  parseFloat(parseFloat(
                parseFloat(num) / Math.pow( 10 ,8 )
            ).toFixed(8));
        }

        // locked asset table start
        // 资产搜索和备选切换
        $scope.$watch("assetSearch", function (value) {
            if (value && value.length > 0) {
                $scope.thisAssetName = value;
            } else {
                $scope.thisAssetName = "safe";
            }
            var now = new Date().getTime();
            if (firstGetAssetNameTime < (now - 30 * 60 * 1000 )) {    //如果第一次获取锁定资产名称的时候超过半个小时
                $scope.getAssetNameList("");     //获取新的
            } else {
                $scope.assetNameList = [];
                if (value)
                    value = value.toUpperCase();
                allAssetNameList.forEach(function (v) {  //循环已得到的资产名称
                    if (v.name.toUpperCase().indexOf(value) >= 0) {   //判断资产名称是否包含输入的名称
                        $scope.assetNameList.push(v);
                    }
                })
            }
        });

        /**
         * 根据已知条件搜索相应的资产名称
         * @param name
         */
        $scope.getAssetNameList = function (name) {
            firstGetAssetNameTime = new Date().getTime();
            LockedAssetName.get({
                assetName: name
            }, function (list) {
                $scope.assetNameList = list.list;
                $scope.assetNameList.unshift({name: "safe"});
                allAssetNameList = $scope.assetNameList;
            });
        };
        /**
         * 点击资产搜索到的资产名称将当前的名称放入input中
         * @param name
         */
        $scope.assetNameClick = function (name) {
            // $scope.thisAssetName = name;
            window.document.getElementById("assetNameInput").value = name;
            window.document.getElementById("assetNameInputTow").value = name;
        };

        /**
         * 点击搜索资产时，根据当前显示的界面切换数据
         */
        $scope.searchAssetNameBtn = function () {

            $scope.thisAssetName = window.document.getElementById("assetNameInput").value;
            // window.document.getElementById("assetNameInputTow").value = name;

            var assetName = "";
            $scope.assetNameList.forEach(function (t) { //点击搜索时判断是否是一个完整的资产名称
                if (t.name == $scope.thisAssetName) {
                    assetName = t.name
                }
            });
            if (assetName == "") {    //如不是，得到当前列表中第一个资产为搜索条件
                $scope.thisAssetName = $scope.assetNameList[0].name;
                window.document.getElementById("assetNameInput").value = $scope.thisAssetName;
                window.document.getElementById("assetNameInputTow").value = $scope.thisAssetName;
            }
            if (isTransactionTable) {
                $scope.LockedTransactionList(1, "assetSwitch");
            } else {
                $scope.LockedAddressList(1, "assetSwitch");
            }
        };

        // pc show or hide asset name list div start
        $scope.showAssetSearchDiv = function () {
            window.document.getElementById("assetNameDiv").style.display = "block";
        };

        $scope.hideAssetSearchDiv = function () {
            window.document.getElementById("assetNameDiv").style.display = "none";
        };

        window.document.getElementById("assetNameInput").onblur = function () {
            setTimeout(function () {
                if(window.document.getElementById("assetNameDiv"))
                    window.document.getElementById("assetNameDiv").style.display = "none";
            }, 1000)
        };
        // pc show or hide asset name list div end

        // mobile show or hide asset name list div start
        $scope.showAssetSearchDivMobile = function () {
            window.document.getElementById("assetNameDivMobile").style.display = "block";
        };

        $scope.hideAssetSearchDivMobile = function () {
            window.document.getElementById("assetNameDivMobile").style.display = "none";
        };

        window.document.getElementById("assetNameInputTow").onblur = function () {
            setTimeout(function () {
                if(window.document.getElementById("assetNameDivMobile"))
                    window.document.getElementById("assetNameDivMobile").style.display = "none";
            }, 1000)
        }
        // mobile show or hide asset name list div end

        // locked asset table end
    });
// Source: public/src/js/controllers/lockedDetail.js
angular.module('insight.lockedDetail').controller('lockedDetailController',
    function ($scope, $rootScope, $routeParams, LockedDetailByAddress) { //todo $location, Global

        $scope.address = $routeParams.address;
        $scope.assetName = $routeParams.assetName;

        var jumpPage = 1;
        var thisPage = 1;
        var displayLength = 7;
        $scope.loading = true;

        $scope.order = "DESC";
        $scope.orderIcon = "↓";
        $scope.list = [];
        $scope.ExpandedTxID = true;

        $scope.getAddressLockedDetail = function (page, flag) {
            if (flag == "orderBy") {
                thisPage = page;
            } else {
                if (flag != "true") {
                    if (page > $scope.maxPage) {
                        return;
                    } else if (page < 1) {
                        return;
                    } else if (thisPage == page) {
                        return;
                    }
                    thisPage = page;
                }
            }

            $scope.list = [];
            $scope.loading = true;
            LockedDetailByAddress.get({
                address: $scope.address,
                assetName: $scope.assetName,
                page: page,
                orderBy: $scope.order
            }, function (data) {
                $scope.pageBut = [];
                $scope.pageButM = [];
                $scope.list = data.list;
                $scope.more = data.more;
                $scope.maxPage = data.maxPage;
                setPageButs(page, data.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });
                $scope.loading = false;
                $scope.prePage = page - 1;
                $scope.nextPage = page + 1;
            })
        };

        /**
         * 切换排序
         */
        $scope.addressLockedOrder = function () {
            if ($scope.order == 'ASC') {
                $scope.order = 'DESC';
                $scope.orderIcon = '↓';
            } else {
                $scope.order = 'ASC';
                $scope.orderIcon = '↓';
            }
            $scope.getAddressLockedDetail(1, "orderBy");
        };
        /**
         * 格式金额
         * @param num
         * @return {Number}
         */
        $scope.formatNumber = function (num) {
            return parseFloat(parseFloat(num).toFixed(8));
        };

        $scope.$watch('jumpPage', function (page) { //绑定控件元素值
            jumpPage = parseInt(page) || 0;
            if (jumpPage > $scope.maxPage) {
                window.document.getElementById("jumpInput").value = $scope.maxPage;
            } else if (jumpPage < 1) {
                if (window.document.getElementById("jumpInput")) {
                    window.document.getElementById("jumpInput").value = 1;
                }
            }
        });

        $scope.jumpPageBut = function () {
            if (jumpPage > 0 && thisPage != jumpPage) {
                if (jumpPage > $scope.maxPage) {
                    jumpPage = parseInt($scope.maxPage);
                }
                $scope.getAddressLockedDetail(jumpPage, "true");
            }
        };

        /**
         * 分页按钮
         * @param page
         * @param maxPage
         * @param cb
         */
        function setPageButs(page, maxPage, cb) {
            var startPage = Math.round(page - displayLength / 2 + 1);
            var endPage = Math.round(page + displayLength / 2);
            if (startPage <= 1) {
                startPage = 1;
                endPage = startPage + displayLength - 1;
                if (endPage >= maxPage - 1) {
                    endPage = maxPage - 1;
                }
            }
            if (endPage >= maxPage - 1) {
                endPage = maxPage;
                startPage = maxPage - displayLength + 1;
                if (startPage <= 1) {
                    startPage = 1;
                }
            }
            cb(startPage, endPage);
        }

    });
// Source: public/src/js/controllers/masterNodeForMobile.js
angular.module('insight.masternodeMobile').controller('MastrtnodeMobileController',
    function ($scope, $modal, amMoment, MasterNode, updateMatterNodeStatus) {
        var mobileType = "undefined";
        var userAgent = window.navigator.userAgent;
        var selfPage = 1;
        var jumpPage = 0;
        var thisPage = 0;
        var displayLength = 7;

        $scope.count = "";

        window.isApp = false;
        var dataBase = {};
        // if(window.intervalName){
        //     clearInterval(window.intervalName);
        // }
        //获取已经关注的节点保存在当前变量中
        var followNodeArray = [];
        var followNodeMap = {};

        $scope.Mobile = function () {
            createDatabase(); //创建数据库实例
            $scope.listmobile(1);
        };

        $scope.read = function () {
            if (userAgent.indexOf("Android") != -1) {
                mobileType = "Android";
            } else if (userAgent.indexOf("iPhone") != -1) {
                mobileType = "iPhone";
            } else if (userAgent.indexOf("SymbianOS") != -1) {
                mobileType = "SymbianOS";
            } else if (userAgent.indexOf("Windows Phone") != -1) {
                mobileType = "Windows Phone";
            } else if (userAgent.indexOf("iPad") != -1) {
                mobileType = "iPhone";
            } else if (userAgent.indexOf("iPod") != -1) {
                mobileType = "iPhone";
            }

            //获取所有master node
            $scope.listmobile(1);

            var ua = navigator.userAgent.toLowerCase();//获取判断用的对象
            if (ua.match(/MicroMessenger/i) == "micromessenger") {
                //在微信中打开
                mobileType = "micromessenger";
                createDatabase(); //创建数据库实例
            } else {
                //如果不是微信登录在调用app 方法获取数据
                window.isApp = true;
                if (mobileType == "iPhone") {

                }
                getFollowMasterNodeList();
            }
        };

        // web database start code --------------------------------------------------------
        var createDatabase = function () {
            var request = window.indexedDB.open('safeDB', 1);
            request.onsuccess = function () {
                console.log("创建或者打开数据库成功！");
                dataBase = request.result;
                console.log(request);
                selectAll();
            };
            request.onerror = function () {
                console.log("创建或者打开数据库失败！" + request.error);
            };
            request.onupgradeneeded = function () {
                console.log("第一次创建数据库或者数据库升级");
                dataBase = request.result;
                /*var FollowMasterNode = */
                dataBase.createObjectStore("FollowMasterNode", {keyPath: "id"});
            }
        };

        $scope.insert = function (node) {
            insertMasterNode(node);
        };

        $scope.delete = function (node) {
            deleteMasterNode(node);
        };

        function selectAll() {
            var transaction = dataBase.transaction('FollowMasterNode', "readonly");
            var objectStore = transaction.objectStore("FollowMasterNode");
            var saveRequest = objectStore.get("list");
            saveRequest.onerror = function (event) {
                console.log(event);
            };
            saveRequest.onsuccess = function () {
                var result = saveRequest.result;
                if (result) {
                    setFollowNodeArray(result.value);
                    $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
                    updateFollowMasterNodeStatus(Object.keys(result.value));
                }
            }
        }

        function insertMasterNode(node) {
            var transaction = dataBase.transaction('FollowMasterNode', "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            followNodeMap[node.address] = {
                address: node.address,
                ip: node.ip,
                status: node.status
            };

            var saveRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });

            saveRequest.onerror = function () {
                console.log("error 存储 FollowMasterNode:" + JSON.stringify(node));
                removeMasterNodeFunc(node);
                judgmentHasBeenConcerned($scope.masternode);
            };
            mobileAddMasterNodeCallback(node);
        }

        // FollowMasterNode
        function deleteMasterNode(node) {
            var transaction = dataBase.transaction("FollowMasterNode", "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            delete followNodeMap[node.address];
            var deleteRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });
            deleteRequest.onerror = function (e) {
                console.log("Error delete record:", e);
                mobileAddMasterNodeCallback(node);
            };
            removeMasterNodeFunc(node);
            if ($scope.isFollow == true) {
                $scope.judgeIsFollow(thisPage);
            } else {
                $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
            }
        }

        // update the web database master node data to the latest
        function updateMasterNode(node) {
            var transaction = dataBase.transaction('FollowMasterNode', "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            followNodeMap[node.address] = node;

            var updateRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });
            setFollowNodeArray(followNodeMap);
            updateRequest.onerror = function (e) {
                console.log("Error delete record:", e);
            };
        }

        var setFollowNodeArray = function (result) {  //只对刚获取的数据库数据和更新数据使用,其他不用
            followNodeArray = [];
            followNodeMap = result;
            var keys = Object.keys(followNodeMap);
            for (var i = 0; i < keys.length; i++) {
                followNodeArray.push(followNodeMap[keys[i]]);
            }
        };

// web database end code -----------------------------------------------------

        /**
         * 切换标签使用
         * @param page
         */
        $scope.judgeIsFollow = function (page) {
            selfPage = page;
            if ($scope.isFollow) {
                $scope.followNode(page);
            } else {
                $scope.listmobile(page);
            }
        };

// window.intervalName = setInterval(function () {
//     var option = {
//         pageNum: thisPage,
//         params: $scope.searchParams || ""
//     }
//     if ($scope.MasterNodeListTabClass == "active") {
//         $scope.listmobile(option);
//     }
// }, 60 * 1000);

        /**
         * 获取所有诸暨店的信息
         * @param page
         */
        $scope.listmobile = function (page) { //默认显示所有
            page = page || 1;
            if (page > 1) {
                if (page > $scope.maxPage && $scope.MasterNodeListTabClass == "active") {
                    return;
                } else if (page < 1) {
                    return;
                } else if (thisPage == page && $scope.MasterNodeListTabClass == "active") {
                    return;
                }
            }

            thisPage = page;
            var option = {
                pageNum: page,
                params: $scope.searchParams || ""
            };
            getMasterNode(option, function (masternode) {
                $scope.masternode = masternode.list;
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;

                $scope.maxPage = masternode.maxPage;
                var startPage = getStartPageNum(page, masternode.maxPage);
                var endPage = getEndPageNum(page, masternode.maxPage);
                setPageButs(page, masternode.maxPage);
                $scope.masternode = judgmentHasBeenConcerned(masternode.list);
                $scope.prePage = page - 1;
                $scope.nextPage = page + 1;
                $scope.isFollow = false;
                $scope.MasterNodeListTabClass = "active";
                $scope.followNodeListTabClass = "";
            });
        };

        // 设置分页按钮
        function setPageButs(page, maxPage) {
            var startPage = Math.round(page - displayLength / 2 + 1);
            var endPage = Math.round(page + displayLength / 2);
            if (startPage <= 1) {
                startPage = 1;
                endPage = startPage + displayLength - 1;
                if (endPage >= maxPage - 1) {
                    endPage = maxPage - 1;
                }
            }
            if (endPage >= maxPage - 1) {
                endPage = maxPage;
                startPage = maxPage - displayLength + 1;
                if (startPage <= 1) {
                    startPage = 1;
                }
            }
            for (var i = startPage; i <= endPage; i++) {
                $scope.pageBut.push({
                    num: i,
                    class: i == page ? "click" : ""
                });
            }
        }

        /**
         * 搜索功能
         */
        $scope.searchFunc = function () {   //搜索
            $scope.searchParams = $scope.searchValue;
            var option = {
                params: $scope.searchValue,
                pageNum: 1
            };
            getMasterNode(option, function (masternode) {
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;
                for (var i = 1; i < 3 && i <= masternode.maxPage; i++) {
                    $scope.pageBut.push({
                        num: i,
                        class: i == 1 ? "click" : ""
                    });
                }
                $scope.masternode = judgmentHasBeenConcerned(masternode.list);
                $scope.prePage = 0;
                $scope.nextPage = 2;
            })
        };

//获取节点信息
        var getMasterNode = function (option, callback) {
            $scope.masternode = [];
            MasterNode.get({
                pageNum: option.pageNum || 1,
                params: option.params || ""
            }, function (masternode) {
                $scope.pageBut = [];
                callback(masternode)
            })
        };

        /**
         * 如果节点被关注则显示已关注
         * @param list
         */
        var judgmentHasBeenConcerned = function (list) {
            list.forEach(function (n) {
                n.beforeFollow = false;
                followNodeArray.forEach(function (fn) {
                    if (fn.address === n.address) {
                        if (fn.status != n.status) {
                            //如果状态被改变，则更新数据库中的数据
                            updateMasterNode(n);
                        }
                        n.beforeFollow = true;
                    }
                })
            });
            return list;
        };

//绑定控件元素值
        $scope.$watch('search', function (searchValue) {
            $scope.searchValue = searchValue;
        });

        /**
         * 添加关注主节点的方法
         * @param node
         */
        $scope.addMasterNodeForMobile = function (node) {
            var result = 0;
            if (mobileType === "Android") {
                window.android.saveMasternode(JSON.stringify(node));
                result = 1;
            } else if (mobileType === "iPhone") {
                window.webkit.messageHandlers.iosAddFollowMasterNode.postMessage(JSON.stringify(node));
                result = 1;
            } else if (mobileType === "SymbianOS") {
            } else if (mobileType === "Windows phone") {
            } else if (mobileType == "micromessenger") {
                insertMasterNode(node);
            }
            if (result == 1) {
                mobileAddMasterNodeCallback(node);
            }
        };

        function saveMasternode(node) {
            return window.android.saveMasternode(node);
        }

//添加关注节点的处理方法
        var mobileAddMasterNodeCallback = function (node) {
            followNodeArray.push(node);
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
        };

        /**
         * 删除关注节点的方法
         * @param node
         */
        $scope.removeMasterNodeForMobile = function (node) {
            var result = 0;
            if (mobileType === "Android") {
                result = window.android.deleteMasternode(JSON.stringify(node));
            } else if (mobileType === "iPhone") {
                window.webkit.messageHandlers.iosDeleteFollowMasterNode.postMessage(JSON.stringify(node));
                result = 1;
            } else if (mobileType === "SymbianOS") {
            } else if (mobileType === "Windows phone") {
            } else if (mobileType == "micromessenger") {
                deleteMasterNode(node.address);
                result = 1;
            }
            if (result == 1) {
                removeMasterNodeFunc(node);
                judgmentHasBeenConcerned($scope.masternode);
            }
        };

//删除关注节点后处理数据
        var removeMasterNodeFunc = function (node) {
            followNodeArray.forEach(function (n, i) {
                if (n.address === node.address) {
                    followNodeArray.remove(i);
                    if ($scope.isFollow == true) {
                        $scope.judgeIsFollow(thisPage);
                    } else {
                        $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
                    }
                    return;
                }
            });
        };

        /**
         *  手机获取已经关注过的主节点方法
         */
        function getFollowMasterNodeList() {
            if (mobileType === "Android") {
                followNodeArray = JSON.parse(window.android.getMasternode());
            } else if (mobileType === "iPhone") {
                // 获取IOS关注的节点信息，需要由ios主动传值过来，window.getIosFoloowMasterNodeList 方法来进行操作
                //getIosFoloowMasterNodeList()
                setTimeout(function () {
                    window.webkit.messageHandlers.iosInit.postMessage();
                }, 3 * 1000);
                return;
            } else if (mobileType === "SymbianOS") {
            } else if (mobileType === "Windows phone") {
            }
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
            appFollowMasterNodeArrayToJson(followNodeArray);

        }

        function appFollowMasterNodeArrayToJson(array) {
            var keys = [];
            array.forEach(function (arr) {
                keys.push(arr.address);
            });
            updateFollowMasterNodeStatus(keys);
        }

        /**
         * ios 获取关注的主节点
         */
        window.getIosFoloowMasterNodeList = function (list) {
            followNodeArray = JSON.parse(list);
            appFollowMasterNodeArrayToJson(followNodeArray);
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
        };

        /**
         * 处理关注节点的显示问题
         * @param page
         */
        $scope.followNode = function (page) {
            $scope.masternode = [];
            if (page > 1) {
                if (page > $scope.maxPage && $scope.followNodeListTabClass == "active") {
                    return;
                } else if (page < 1) {
                    return;
                } else if (thisPage == page && $scope.followNodeListTabClass == "active") {
                    return;
                }
            }
            thisPage = page;
            for (var i = (page - 1) * 10; i < page * 10; i++) {
                if (followNodeArray[i]) {
                    $scope.masternode.push(followNodeArray[i]);
                    continue;
                }
                break;
            }

            $scope.more = followNodeArray.length / 10 > page;
            $scope.prePage = page - 1;
            $scope.nextPage = page + 1;
            $scope.isFollow = true;
            var maxPage = Math.ceil(followNodeArray.length / 10);
            $scope.maxPage = maxPage;
            $scope.pageBut = [];
            var startPage = getStartPageNum(page, maxPage);
            var endPage = getEndPageNum(page, maxPage);

            for (var j = startPage; j <= endPage; j++) {
                $scope.pageBut.push({
                    num: j,
                    class: j == page ? "click" : ""
                });
            }
            $scope.MasterNodeListTabClass = "";
            $scope.followNodeListTabClass = "active";
        };

//获取结束的页数
        function getEndPageNum(page, maxPage) {
            return page + maxPage > maxPage ? maxPage : page + maxPage;
        }

//获取开始的页数
        function getStartPageNum(page, maxPage) {
            return page - maxPage <= 0 ? 1 : page - maxPage;
        }

        /**
         * 跳转分页
         */
        $scope.$watch('jumpPage', function (page) { //绑定控件元素值
            jumpPage = parseInt(page) || 0;
        });
 3
        $scope.jumpPageBut = function () {
            if (jumpPage > 0 && thisPage != jumpPage) {
                if (jumpPage > $scope.maxPage) {
                    jumpPage = parseInt($scope.maxPage);
                }
                $scope.judgeIsFollow(jumpPage);
            }
        };

        var updateFollowMasterNodeStatus = function (addresses) {
            updateMatterNodeStatus.get({addresses: addresses}, function (data) {
                data = data.data;
                var keys = Object.keys(data);
                keys.forEach(function (key) {
                    if (data[key].address == followNodeMap[key].address) {
                        if (data[key].status != followNodeMap[key].status) {
                            updateMasterNode(data[key]);
                        }
                    }
                });
            });
        }

    });

// Source: public/src/js/controllers/masternode.js
angular.module('insight.masternode').controller('MastrtnodeController',
    function ($scope, $rootScope, $routeParams, $location, Global, MasterNode, updateMatterNodeStatus) {
        var timerPage = 1;
        // 检测平台的方法
        var isMobile = true;
        var jumpPage = 0;
        var thisPage = 0;
        var displayLength = 7;
        $scope.count = "";
        $scope.loading = true;
        var followNodeArray = [];
        var followNodeMap = {};
        var dataBase = {};

        if (window.intervalName) {
            clearInterval(window.intervalName);
        }

        /***** 弄饼 */
        var piechart = echarts.init(document.getElementById('piechart')); //div 标签id
        function buildPieChart( rateCount ) {
            var title_subtext = JSON.stringify(rateCount);
            var legend_data = Object.keys( rateCount );
            var series_data = [];
            for( var name in rateCount ){
                series_data.push({
                    name:name ,
                    value: rateCount[name],
                })     
            }
            option = {
                title: {
                    text: 'SAFE网络主节点状态分布图(总节点数' + $scope.count + ')',
                    subtext: title_subtext,
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b} : {c} ({d}%)'
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    data: legend_data
                },
                series: [
                    {
                        name: '节点状态',
                        type: 'pie',
                        radius: '55%',
                        center: ['50%', '60%'],
                        data: series_data,
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                             },
                            normal:{
                                color:function(params) {
                                //自定义颜色
                                var colorList = [          
                                        'green',
                                        '#8dc1a9',
                                        '#2f4554',
                                        '#e69d87',
                                        '#ea7e53',
                                        '#eedd78',
                                ];
                                return colorList[params.dataIndex]
                                }
                            }
                        }
                    }
                ]
            };
            piechart.setOption(option);
          }
        //////////////////////////////



        $scope.judgeNotMobile = function () {   //如果mobile打开，不会执行此方法
            var system = {
                win: false,
                mac: false,
                xll: false
            };
            //检测平台
            var p = navigator.platform;
            system.win = p.indexOf("Win") == 0;
            system.mac = p.indexOf("Mac") == 0;
            system.x11 = (p == "X11") || (p.indexOf("Linux") == 0);

            if (!system.win && !system.mac && !system.xll) {  // 如果不是pc端
                if (window.isApp) {
                    $location.path("masterNodeApp/");
                } else {
                    $location.path("masterNodeMobile/");
                }
            }
            createDatabase(); //创建数据库实例
            isMobile = false;
            $scope.list(1);
        };

        function detectionApp() {
            window.android.isApp();
            window.webkit.messageHandlers.iosDeleteFollowMasterNode.postMessage(JSON.stringify(node));
            return true;
        }

        // web database start code
        var createDatabase = function () {
            var request = window.indexedDB.open('safeDB', 1);
            request.onsuccess = function () {
                dataBase = request.result;
                selectAll();
            };
            request.onerror = function () {
                console.log("创建或者打开数据库失败！" + request.error);
            };
            request.onupgradeneeded = function () {
                dataBase = request.result;
                /*var FollowMasterNode = */
                dataBase.createObjectStore("FollowMasterNode", {keyPath: "id"});
            }
        };

        $scope.insert = function (node) {
            var transaction = dataBase.transaction('FollowMasterNode', "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            followNodeMap[node.address] = {
                address: node.address,
                ip: node.ip,
                status: node.status
            };

            var saveRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });

            saveRequest.onerror = function () {
                console.log("error 存储 FollowMasterNode:" + JSON.stringify(node));
                removeMasterNodeFunc(node);
                judgmentHasBeenConcerned($scope.masternode);
            };
            mobileAddMasterNodeCallback(node);
        };

        $scope.delete = function (node) {
            var transaction = dataBase.transaction("FollowMasterNode", "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            delete followNodeMap[node.address];
            var deleteRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });
            deleteRequest.onerror = function (e) {
                console.log("Error delete record:", e);
                mobileAddMasterNodeCallback(node);
            };
            removeMasterNodeFunc(node);
            if ($scope.isFollow == true) {
                $scope.judgeIsFollow(thisPage);
            } else {
                $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
            }
        };

        function updateMasterNode(node) {
            var transaction = dataBase.transaction('FollowMasterNode', "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            followNodeMap[node.address] = node;

            var updateRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });
            setFollowNodeArray(followNodeMap);
            updateRequest.onerror = function (e) {
                console.log("Error delete record:", e);
            };
        }

        function selectAll() {
            var transaction = dataBase.transaction('FollowMasterNode', "readonly");
            var objectStore = transaction.objectStore("FollowMasterNode");
            var saveRequest = objectStore.get("list");
            saveRequest.onerror = function (event) {
                console.log(event);
            };
            saveRequest.onsuccess = function () {
                var result = saveRequest.result;
                if (result) {
                    setFollowNodeArray(result.value);
                    $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
                    updateFollowMasterNodeStatus(Object.keys(result.value));
                }
            }
        }

        var setFollowNodeArray = function (result) {  //只对刚获取的数据库数据和更新数据使用,其他不用
            followNodeArray = [];
            followNodeMap = result;
            var keys = Object.keys(followNodeMap);
            for (var i = 0; i < keys.length; i++) {
                followNodeArray.push(followNodeMap[keys[i]]);
            }
        };

        var removeMasterNodeFunc = function (node) {
            followNodeArray.forEach(function (n, i) {
                if (n.address == node.address) {
                    followNodeArray.remove(i);
                }
            });
        };

        //添加关注节点的回调
        var mobileAddMasterNodeCallback = function (node) {
            followNodeArray.push(node);
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
        };

        //更新关注节点信息
        var judgmentHasBeenConcerned = function (list) {
            if (list)
                list.forEach(function (n) {
                    n.beforeFollow = false;
                    followNodeArray.forEach(function (fn) {
                        if (fn.address == n.address) {
                            if (fn.status != n.status) {
                                //如果状态被改变，则更新数据库中的数据
                                updateMasterNode(n);
                            }
                            n.beforeFollow = true;
                        }
                    })
                });
            return list;
        };

        // 处理分页 和跳转显示问题
        $scope.judgeIsFollow = function (page) {
            if ($scope.isFollow) {
                $scope.followNode(page);
            } else {
                $scope.list(page);
            }
            thisPage = page;
        };

        $scope.showRate = function(){
            var option = {
                pageNum: 1,
                params: ""
            };
            getMasterNode(option , function(){
                 // 将数据适配为饼状图需要的数据.
                buildPieChart( $scope.rateCount );
                $scope.MasterNodeRateTabClass = 'active';
                $scope.MasterNodeListTabClass = '';
                $scope.followNodeListTabClass = '';
            });
        }

        // 调用获取所有主节点的方法
        $scope.list = function (page) { //默认显示所有
            if (page > 1) {
                if (page > $scope.maxPage && $scope.MasterNodeListTabClass == "active") {
                    return;
                } else if (thisPage == page && $scope.MasterNodeListTabClass == "active") {
                    return;
                }
            } else if (page < 1) {
                return;
            }
            timerPage = page;
            var option = {
                pageNum: page,
                params: $scope.searchParams || ""
            };
            getMasterNode(option , function(){
                $scope.MasterNodeListTabClass = "active";
                $scope.MasterNodeRateTabClass = "";
                $scope.followNodeListTabClass = "";
            });
        };

        // 获取关注的节点
        $scope.followNode = function (page) {
            if (page > 1) {
                if (page > $scope.maxPage && $scope.followNodeListTabClass == "active") {
                    return;
                } else if (thisPage == page && $scope.followNodeListTabClass == "active") {
                    return;
                }
            } else if (page < 1) {
                return;
            }
            $scope.masternode = [];
            thisPage = page;
            for (var i = (page - 1) * 10; i < page * 10; i++) {
                if (followNodeArray[i]) {
                    $scope.masternode.push(followNodeArray[i]);
                }
            }
            $scope.more = followNodeArray.length / 10 > page;
            $scope.prePage = page - 1;
            $scope.nextPage = page + 1;
            $scope.isFollow = true;
            var maxPage = Math.ceil(followNodeArray.length / 10);
            $scope.maxPage = maxPage;
            $scope.pageBut = [];
            setPageButs(page, maxPage);

            $scope.MasterNodeListTabClass = "";
            $scope.MasterNodeRateTabClass = "";
            $scope.followNodeListTabClass = "active";
        };

        // 设置分页按钮
        function setPageButs(page, maxPage) {
            var startPage = Math.round(page - displayLength / 2 + 1);
            var endPage = Math.round(page + displayLength / 2);
            if (startPage <= 1) {
                startPage = 1;
                endPage = startPage + displayLength - 1;
                if (endPage >= maxPage - 1) {
                    endPage = maxPage - 1;
                }
            }
            if (endPage >= maxPage - 1) {
                endPage = maxPage;
                startPage = maxPage - displayLength + 1;
                if (startPage <= 1) {
                    startPage = 1;
                }
            }
            for (var i = startPage; i <= endPage; i++) {
                $scope.pageBut.push({
                    num: i,
                    class: i == page ? "btn-default" : "btn-primary"
                });
            }
        }

        /**
         * 获取所有主节点信息
         * @param option
         */
        var getMasterNode = function (option , callback ) {
            var page = option.pageNum;
            thisPage = page;
            MasterNode.get({
                pageNum: option.pageNum,
                params: option.params
            }, function (masternode) {
                $scope.pageBut = [];
                $scope.pageButM = [];
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;
                $scope.maxPage = masternode.maxPage;
                setPageButs(page, masternode.maxPage);
                $scope.loading = false;
                $scope.prePage = page - 1;
                $scope.nextPage = page + 1;
                $scope.masternode = judgmentHasBeenConcerned(masternode.list);
                $scope.isFollow = false;
                $scope.rateCount = masternode.rateCount;

                if (callback){
                    callback();
                }
            })
        };

        $scope.searchFunc = function () {   //搜索
            timerPage = 1;
            $scope.searchParams = $scope.searchValue;
            var option = {
                params: $scope.searchValue,
                pageNum: 1
            };
            getMasterNode(option);
        };

        $scope.$watch('search', function (searchValue) { //绑定控件元素值
            $scope.searchValue = searchValue;
        });

        window.intervalName = setInterval(function () {
            var option = {
                pageNum: timerPage,
                params: $scope.searchParams || ""
            };
            if ($scope.MasterNodeListTabClass == "active") {
                getMasterNode(option);
            }
        }, 60 * 1000);

        $scope.$watch('jumpPage', function (page) { //绑定控件元素值
            jumpPage = parseInt(page) || 0;
            if (jumpPage > $scope.maxPage) {
                window.document.getElementById("jumpInput").value = $scope.maxPage;
            } else if (jumpPage < 1) {
                window.document.getElementById("jumpInput").value = 1;
            }
        });

        $scope.jumpPageBut = function () {
            if (jumpPage > 0 && thisPage != jumpPage) {
                if (jumpPage > $scope.maxPage) {
                    jumpPage = parseInt($scope.maxPage);
                }
                $scope.judgeIsFollow(jumpPage);
            }
        };

        var updateFollowMasterNodeStatus = function (addresses) {
            updateMatterNodeStatus.get({addresses: addresses}, function (data) {
                data = data.data;
                var keys = Object.keys(data);
                keys.forEach(function (key) {
                    if (data[key].address == followNodeMap[key].address) {
                        if (data[key].status != followNodeMap[key].status) {
                            updateMasterNode(data[key]);
                        }
                    }
                });
            });
        }
    }
);
// Source: public/src/js/controllers/messages.js
angular.module('insight.messages').controller('VerifyMessageController',
  function($scope, $http) {
  $scope.message = {
    address: '',
    signature: '',
    message: ''
  };
  $scope.verification = {
    status: 'unverified',  // ready|loading|verified|error
    result: null,
    error: null,
    address: ''
  };

  $scope.verifiable = function() {
    return ($scope.message.address
            && $scope.message.signature
            && $scope.message.message);
  };
  $scope.verify = function() {
    $scope.verification.status = 'loading';
    $scope.verification.address = $scope.message.address;
    $http.post(window.apiPrefix + '/messages/verify', $scope.message)
      .success(function(data, status, headers, config) {
        if(typeof(data.result) != 'boolean') {
          // API returned 200 but result was not true or false
          $scope.verification.status = 'error';
          $scope.verification.error = null;
          return;
        }

        $scope.verification.status = 'verified';
        $scope.verification.result = data.result;
      })
      .error(function(data, status, headers, config) {
        $scope.verification.status = 'error';
        $scope.verification.error = data;
      });
  };

  // Hide the verify status message on form change
  var unverify = function() {
    $scope.verification.status = 'unverified';
  };
  $scope.$watch('message.address', unverify);
  $scope.$watch('message.signature', unverify);
  $scope.$watch('message.message', unverify);
});

// Source: public/src/js/controllers/scanner.js
angular.module('insight.system').controller('ScannerController',
    function ($scope, $rootScope, $modalInstance, Global) {
        $scope.global = Global;

        // Detect mobile devices
        var isMobile = {
            Android: function () {
                return navigator.userAgent.match(/Android/i);
            },
            BlackBerry: function () {
                return navigator.userAgent.match(/BlackBerry/i);
            },
            iOS: function () {
                return navigator.userAgent.match(/iPhone|iPad|iPod/i);
            },
            Opera: function () {
                return navigator.userAgent.match(/Opera Mini/i);
            },
            Windows: function () {
                return navigator.userAgent.match(/IEMobile/i);
            },
            any: function () {
                return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
            }
        };

        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
        window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
        $scope.isMobile = isMobile.any();
        $scope.scannerLoading = false;

        var $searchInput = angular.element(document.getElementById('search')),
            cameraInput,
            video,
            canvas,
            $video,
            context,
            localMediaStream;

        var _scan = function (evt) {
            if ($scope.isMobile) {
                $scope.scannerLoading = true;
                var files = evt.target.files;

                if (files.length === 1 && files[0].type.indexOf('image/') === 0) {
                    var file = files[0];

                    var reader = new FileReader();
                    reader.onload = (function (theFile) {
                        return function (e) {
                            var mpImg = new MegaPixImage(file);
                            mpImg.render(canvas, {maxWidth: 200, maxHeight: 200, orientation: 6});

                            setTimeout(function () {
                                qrcode.width = canvas.width;
                                qrcode.height = canvas.height;
                                qrcode.imagedata = context.getImageData(0, 0, qrcode.width, qrcode.height);

                                try {
                                    qrcode.decode();
                                } catch (e) {
                                    alert(e);
                                }
                            }, 1500);
                        };
                    })(file);

                    // Read  in the file as a data URL
                    reader.readAsDataURL(file);
                }
            } else {
                if (localMediaStream) {
                    context.drawImage(video, 0, 0, 300, 225);

                    try {
                        qrcode.decode();
                    } catch (e) {
                        //qrcodeError(e);
                    }
                }

                setTimeout(_scan, 500);
            }
        };

        var _successCallback = function (stream) {
            video.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
            localMediaStream = stream;
            video.play();
            setTimeout(_scan, 1000);
        };

        var _scanStop = function () {
            $scope.scannerLoading = false;
            $modalInstance.close();
            if (!$scope.isMobile) {
                if (localMediaStream.stop) localMediaStream.stop();
                localMediaStream = null;
                video.src = '';
            }
        };

        var _videoError = function (err) {
            _scanStop();
        };

        qrcode.callback = function (data) {
            _scanStop();

            var str = (data.indexOf('safe:') === 0) ? data.substring(8) : data;
            $searchInput
                .val(str)
                .triggerHandler('change')
                .triggerHandler('submit');
        };

        $scope.cancel = function () {
            _scanStop();
        };

        $modalInstance.opened.then(function () {
            $rootScope.isCollapsed = true;

            // Start the scanner
            setTimeout(function () {
                canvas = document.getElementById('qr-canvas');
                context = canvas.getContext('2d');

                if ($scope.isMobile) {
                    cameraInput = document.getElementById('qrcode-camera');
                    cameraInput.addEventListener('change', _scan, false);
                } else {
                    video = document.getElementById('qrcode-scanner-video');
                    $video = angular.element(video);
                    canvas.width = 300;
                    canvas.height = 225;
                    context.clearRect(0, 0, 300, 225);
                    navigator.getUserMedia({video: true}, _successCallback, _videoError);
                }
            }, 500);
        });
    });

// Source: public/src/js/controllers/search.js
angular.module('insight.search').controller('SearchController',
    function ($scope, $routeParams, $location, $timeout, Global, Block, Transaction, Address, BlockByHeight, AssetsbyId) {
        $scope.global = Global;
        $scope.loading = false;

        var _badQuery = function () {
            $scope.badQuery = true;

            $timeout(function () {
                $scope.badQuery = false;
            }, 2000);
        };

        var _resetSearch = function () {
            $scope.q = '';
            $scope.loading = false;
        };

        $scope.search = function () {
            var q = $scope.q;
            $scope.badQuery = false;
            $scope.loading = true;
            if(q.length > 100){
                _badQuery();
                return;
            }
            getBlockByHash(q)
        }

        var getBlockByHash = function (q) {
            Block.get({
                blockHash: q
            }, function () {
                _resetSearch();
                $location.path('block/' + q);
            }, function () { //block not found, search on TX
                getTransaction(q);
            });
        };

        var getTransaction = function (q) {
            Transaction.get({
                txId: q
            }, function () {
                _resetSearch();
                $location.path('tx/' + q);
            }, function () { //tx not found, search on Address
                getAddress(q);
            });
        }

        var getAddress = function (q) {
            Address.get({
                addrStr: q
            }, function () {
                _resetSearch();
                $location.path('address/' + q);
            }, function () {// address not found
                getBlockByheight(q);
            });
        }

        var getBlockByheight = function (q) {
            BlockByHeight.get({
                blockHeight: q
            }, function (hash) {
                _resetSearch();
                if(q === '0') {
                    getAssetsById(q);
                }else{
                    $location.path('/block/' + hash.blockHash);
                }
            }, function () { // block by height not found
                getAssetsById(q);
            });
        }

        var getAssetsById = function (q) {
            AssetsbyId.get({
                assetsId: q
            }, function (assets) {
                _resetSearch();
                if(q.length == 64){
                    $location.path('/AssetsDetail/' + q);
                }else{
                    $location.path('/Assets/' + q);
                }
            }, function () {// assets not found
                if (isFinite(q)) { // ensure that q is a finite number. A logical height value.
                    $scope.loading = false;
                    _badQuery();
                } else {
                    $scope.loading = false;
                    _badQuery();
                }
            })
        }
    });
// Source: public/src/js/controllers/status.js
angular.module('insight.status').controller('StatusController',
  function($scope, $routeParams, $location, Global, Status, Sync, getSocket) {
    $scope.global = Global;

    $scope.getStatus = function(q) {
      Status.get({
          q: 'get' + q
        },
        function(d) {
          $scope.loaded = 1;
          angular.extend($scope, d);
        },
        function(e) {
          $scope.error = 'API ERROR: ' + e.data;
        });
    };

    $scope.humanSince = function(time) {
      var m = moment.unix(time / 1000);
      return m.max().fromNow();
    };

    var _onSyncUpdate = function(sync) {
      $scope.sync = sync;
    };

    var _startSocket = function () {
      socket.emit('subscribe', 'sync');
      socket.on('status', function(sync) {
        _onSyncUpdate(sync);
      });
    };
    
    var socket = getSocket($scope);
    socket.on('connect', function() {
      _startSocket();
    });

    $scope.getSync = function() {
      _startSocket();
      Sync.get({},
        function(sync) {
          _onSyncUpdate(sync);
        },
        function(e) {
          var err = 'Could not get sync information' + e.toString();
          $scope.sync = {
            error: err
          };
        });
    };
  });

// Source: public/src/js/controllers/transactions.js
angular.module('insight.transactions').controller('transactionsController',
    function ($scope, $rootScope, $routeParams, $location, $compile, Global, Transaction, TransactionsByBlock, TransactionsByAddress, UnlockHeight) {
        $scope.global = Global;
        $scope.loading = false;
        $scope.loadedBy = null;

        $rootScope.UnlockHeight = UnlockHeight;

        var pageNum = 0;
        var pagesTotal = 1;
        var appType = 9999;
        var unlockHeight = 0;
        var thisAssetsType = "";

        var _aggregateItems = function (items) {
            if (!items) return [];
            var l = items.length;

            var ret = [];
            var tmp = {};
            var u = 0;

            console.log( 'FOR() this Array[] vin/vout ... ' );
            for (var i = 0; i < l; i++) {

                var notAddr = false;
                // non standard input
                if (items[i].scriptSig && !items[i].addr) {
                    notAddr = true;
                }

                if (items[i].scriptSig) {
                    if (items[i].scriptSig.asm) {
                        var asmArray = items[i].scriptSig.asm.split(' ');
                        items[i].Confirmations = asmArray[0];
                        items[i].scriptSig = asmArray[1] || " ";
                    }
                }

                // non standard output
                if (items[i].scriptPubKey && !items[i].scriptPubKey.addresses) {
                    items[i].scriptPubKey.addresses = ['Unparsed address [' + u++ + ']'];
                    items[i].notAddr = true;
                    notAddr = true;
                }

                if (items[i].scriptPubKey && items[i].scriptPubKey.addresses.length > 1) {
                    items[i].addr = items[i].scriptPubKey.addresses.join(',');
                    ret.push(items[i]);
                    continue;
                }

                var addr = items[i].addr || (items[i].scriptPubKey && items[i].scriptPubKey.addresses[0]);
                if (items[i].reserve && items[i].reserve.appType >= 200) {  //如果地址是资产交易，则让它与safe交易分开
                    addr += " ";
                } else if (items[i].assetId) {
                    addr += " ";
                }
                if (items[i].unlockHeight > 0) {    //如果地址中有锁定交易，则分开显示  PS: safe和资产交易都分开
                    addr += " ";
                }
                if (!tmp[addr]) {
                    tmp[addr] = {};
                    tmp[addr].value = 0;
                    tmp[addr].count = 0;
                    tmp[addr].addr = addr;
                    tmp[addr].items = [];
                }
                tmp[addr].isSpent = items[i].spentTxId;
                tmp[addr].DepositFlag = items[i].DepositFlag;

                tmp[addr].doubleSpentTxID = tmp[addr].doubleSpentTxID || items[i].doubleSpentTxID;
                tmp[addr].doubleSpentIndex = tmp[addr].doubleSpentIndex || items[i].doubleSpentIndex;
                tmp[addr].dbError = tmp[addr].dbError || items[i].dbError;
                tmp[addr].items.push(items[i]);
                tmp[addr].notAddr = notAddr;
                if (items[i].unlockHeight > 0) {    // 判断锁定
                    tmp[addr].unlockHeight = items[i].unlockHeight;
                    tmp[addr].isLocked = items[i].unlockHeight > unlockHeight;
                }

                var shortName = " SAFE";
                // 如果input中有 asset id
                tmp[addr].value = Decimal(tmp[addr].value).add(items[i].value || 0).toString();
                if (items[i].shortName) {
                    shortName = " " + items[i].shortName;
                    tmp[addr].assetId = items[i].assetId;
                } else if (items[i].reserve && items[i].reserve.appType >= 200 && items[i].reserve.appType < 300) {    //如果这个reverse是发放糖果
                    shortName = " " + items[i].reserve.shortName;
                    tmp[addr].assetId = items[i].reserve.assetId;
                    // } else {
                    // tmp[addr].value = parseFloat((tmp[addr].value + parseFloat(items[i].value)).toFixed(8));
                }
                if (shortName != " SAFE") {
                    thisAssetsType = shortName;
                }
                shortName = shortName.length > 8 ? shortName.slice(0, 6) + "..." : shortName;

                //获取当前交易中最大的一个应用类型
                if (items[i].reserve && items[i].reserve.appType < appType && items[i].reserve.appType != 204) {
                    appType = items[i].reserve.appType;
                }
                tmp[addr].shortName = shortName;       //给新组装的数据加入资产类型 PS：判断或者由API传回来
                tmp[addr].reserve = items[i].reserve || {};
                items[i].shortName = shortName;        //给每个原始数据上面加入资产类型
                if (items[i].unconfirmedInput)
                    tmp[addr].unconfirmedInput = true;
                tmp[addr].count++;
            }

            angular.forEach(tmp, function (v) {
                v.value = convertNum(v.value);
                ret.push(v);
            });
            return ret;
        };

        var _processTX = function (tx) {
            thisAssetsType = "";
            appType = 999;
            unlockHeight = tx.confirmations + tx.blockheight;   // 当前高度 = 交易高度 加 确认数
            console.log('controllers/transaction.js > _aggregateItems(tx.vin[])');
            tx.vinSimple = _aggregateItems(tx.vin);
            console.log('controllers/transaction.js > _aggregateItems(tx.vout[])');
            tx.voutSimple = _aggregateItems(tx.vout);
            tx.appType = appType;
            tx.shortName = thisAssetsType;
        };
        var _paginate = function (data) {
            $scope.loading = false;
            if (!$scope.block) {
                $scope.block = {};
            }
            $scope.block.newReward = 0;
            pagesTotal = data.pagesTotal;
            pageNum += 1;
            // var allReward = 0;
            // var txAllOutputValue = 0;
            data.txs.forEach(function (tx) {
                if (typeof tx.txid != "undefined") {
                    _processTX(tx);
                    $scope.txs.push(tx);
                }
            })
        };

        var _byBlock = function () {
            TransactionsByBlock.get({
                block: $scope.block.hash,
                pageNum: pageNum
            }, function (data) {
                _paginate(data);
            });
        };

        var _byAddress = function (assetsId) {
            TransactionsByAddress.get({
                address: $routeParams.addrStr,
                pageNum: pageNum,
                assetsId: assetsId || ""
            }, function (data) {
                _paginate(data);
            });
        };


        var _findTx = function (txid) {
            console.log('controllers/transactions.js > _findTx() : ' + txid );
            Transaction.get({
                txId: txid
            }, function (tx) {
                console.log('controllers/transaction.js > got the tx from Insight-api-safe ');
                console.log( tx );
                $rootScope.titleDetail = tx.txid.substring(0, 7) + '...';
                $rootScope.flashMessage = null;
                $scope.tx = tx;
                console.log('controllers/transaction.js > _processTx(tx)');
                _processTX(tx);
                tx.assetsId = thisAssetsType;
                $scope.txs.unshift(tx);
            }, function (e) {
                if (e.status === 400) {
                    $rootScope.flashMessage = 'Invalid Transaction ID: ' + $routeParams.txId;
                } else if (e.status === 503) {
                    $rootScope.flashMessage = 'Backend Error. ' + e.data;
                } else {
                    $rootScope.flashMessage = 'Transaction Not Found';
                }
                $location.path('/');
            });
        };
        $scope.findThis = function () {
            _findTx($routeParams.txId);
        };
        // Initial load
        $scope.load = function (from, assetId) {
            $scope.loadedBy = from;
            $scope.loadMore(assetId);
        };

        // Load more transactions for pagination
        $scope.loadMore = function (assetId) {
            if (pageNum < pagesTotal && !$scope.loading) {
                $scope.loading = true;
                if ($scope.loadedBy === 'address') {
                    _byAddress(assetId || "");
                } else {
                    _byBlock();
                }
            }
        };

        // Highlighted txout
        if ($routeParams.v_type == '>' || $routeParams.v_type == '<') {
            $scope.from_vin = $routeParams.v_type == '<';
            $scope.from_vout = $routeParams.v_type == '>';
            $scope.v_index = parseInt($routeParams.v_index);
            $scope.itemsExpanded = true;
        }
        // Init without txs
        $scope.txs = [];
        $scope.$on('tx', function (event, txid) {
            _findTx(txid);
        });

        $scope.FormatFeeRate = function (num) {
            return parseFloat(num.toFixed(8))
        };

        function convertNum(amount) {
            // 判断是否科学计数法,是则进行转换
            var num = 0;
            var result = [];
            if ((amount.indexOf('E') != -1) || (amount.indexOf('e') != -1)) {
                (amount.indexOf('E') != -1) ? num = amount.indexOf('E') : num = amount.indexOf('e');
                var decimal = amount.substr(0, num);
                // devide the sentice efficial number
                var decArr = decimal.split('.', 2);
                // total 10 power
                var power = amount.substr(num + 1, amount.length);
                // symbol + -
                var symbol = power.substr(0, 1);
                power = power.substr(1, power.length);
                power = power * 1.0;
                if ('+' == symbol) {
                    // the number of 0 is power - decArr[1]
                    power = power - decArr[1].length;
                    // the return data
                    while (power > 0) {
                        result.unshift(0);
                        power -= 1;
                    }
                    result.unshift(decArr[1] * 1.0);
                    result.unshift(decArr[0] * 1.0);
                } else {
                    if (decArr[1]) {
                        power = power - decArr[1].length;
                    }
                    power--;
                    result = [0];
                    result.push('.');
                    while (power > 0) {
                        result.push(0);
                        power -= 1;
                    }
                    result.push(decArr);
                }
                result.join("");
                result = result + '';
                amount = result.replace(/,/g, '');
            }
            return amount;
        }
    });

angular.module('insight.transactions').controller('SendRawTransactionController',
    function ($scope, $http) {
        $scope.transaction = '';
        $scope.status = 'ready';  // ready|loading|sent|error
        $scope.txid = '';
        $scope.error = null;

        $scope.formValid = function () {
            return !!$scope.transaction;
        };
        $scope.send = function () {
            var postData = {
                rawtx: $scope.transaction
            };
            $scope.status = 'loading';
            $http.post(window.apiPrefix + '/tx/send', postData)
                .success(function (data, status, headers, config) {
                    if (typeof(data.txid) != 'string') {
                        // API returned 200 but the format is not known
                        $scope.status = 'error';
                        $scope.error = 'The transaction was sent but no transaction id was got back';
                        return;
                    }
                    $scope.status = 'sent';
                    $scope.txid = data.txid;
                }).error(function (data, status, headers, config) {
                $scope.status = 'error';
                if (data) {
                    $scope.error = data;
                } else {
                    $scope.error = "No error message given (connection error?)"
                }
            });
        };
    });

// Source: public/src/js/services/address.js
angular.module('insight.address').factory('Address', function ($resource) {
    return $resource(window.apiPrefix + '/addr/:addrStr/?noTxList=1', {
        addrStr: '@addStr',
        assetsId: '@assetsId'

    }, {
        get: {
            method: 'GET',
            interceptor: {
                response: function (res) {
                    return res.data;
                },
                responseError: function (res) {
                    if (res.status === 404) {
                        return res;
                    }
                }
            }
        }
    });
});

 
// Source: public/src/js/services/addressLabel.js
angular.module('insight.addressLabel').factory('AddressLabel', function ( config ) {
    return {
        hasLabel:function( address ){
            if ( address == config.address_label.BLOCK_HOLE_ADDRESS
                || address == config.address_label.APP_DESTORY_ADDRESS ){
                    return true;
            }
            return false;
        } , 
        getLabel:function( address ){
            if ( this.hasLabel( address ) ){
                return "销毁地址";
            }
            return "";
        }
    }
});

 
// Source: public/src/js/services/amountStatistic.js
angular.module('insight.amountStatistic').factory('AmountStatistic', function ($resource) {
    return $resource(window.apiPrefix + '/amountStatistic', {
        
    }, {
        get: {
            method: 'GET',
            interceptor: {
                response: function (res) {
                    return res.data;
                },
                responseError: function (res) {
                    if (res.status === 404) {
                        return res;
                    }
                }
            }
        }
    })
})
// Source: public/src/js/services/assets.js
angular.module('insight.assets').factory('AssetsbyId', function ($resource) {
    return $resource(window.apiPrefix + '/assets/:assetsId', {
        assetsId: '@assetsId'
    }, {
        get: {
            method: 'GET',
            interceptor: {
                response: function (res) {
                    return res.data;
                },
                responseError: function (res) {
                    if (res.status === 404) {
                        return res;
                    }
                }
            }
        }
    })
}).factory("AssetsList",
    function ($resource) {
        return $resource(window.apiPrefix + '/assetsList', {})
    }).factory("getAssetsTranasction",
    function ($resource) {
        return $resource(window.apiPrefix + '/getAssetsTranasction/:page', {})
    }).factory("getAssetsTxForAll",
    function ($resource) {
        return $resource(window.apiPrefix + '/getAssetsTxAll/:page', {})
    });

// Source: public/src/js/services/balanceRanking.js

angular.module('insight.balanceRanking').factory('BalanceRanking', function ($resource) {
    return $resource(window.apiPrefix + '/balanceRanking', {
        page: '@page',
    }, {
        get: {
            method: 'GET',
            interceptor: {
                response: function (res) {
                    return res.data;
                },
                responseError: function (res) {
                    if (res.status === 404) {
                        return res;
                    }
                }
            }
        }
    })
})
// Source: public/src/js/services/blocks.js
angular.module('insight.blocks').factory('Block', function ($resource) {
    return $resource(window.apiPrefix + '/block/:blockHash', {
        blockHash: '@blockHash'
    }, {
        get: {
            method: 'GET',
            interceptor: {
                response: function (res) {
                    return res.data;
                },
                responseError: function (res) {
                    if (res.status === 404) {
                        return res;
                    }
                }
            }
        }
    });
}).factory('Blocks', function ($resource) {
    return $resource(window.apiPrefix + '/blocks');
}).factory('BlockByHeight', function ($resource) {
    return $resource(window.apiPrefix + '/block-index/:blockHeight');
});

// Source: public/src/js/services/currency.js
angular.module('insight.currency').factory('Currency',
  function($resource) {
    return $resource(window.apiPrefix + '/currency');
});

// Source: public/src/js/services/global.js
//Global service for global variables
angular.module('insight.system').factory('Global', [
    function () {
    }
]).factory('Version', function ($resource) {
    return $resource(window.apiPrefix + '/version');
});

// Source: public/src/js/services/lockedAddress.js
angular.module('insight.lockedAddress').factory('LockedAddress', function ($resource) {
    return $resource(window.apiPrefix + '/lockedAddr', {
        address: '@address',
        page: '@page',
        order: '@order'
    }, {
        get: {
            method: 'GET',
            interceptor: {
                response: function (res) {
                    return res.data;
                },
                responseError: function (res) {
                    if (res.status === 404) {
                        return res;
                    }
                }
            }
        }
    })
}).factory("LockedTransaction",
    function ($resource) {
        return $resource(window.apiPrefix + '/lockedTx', {})
    }).factory("LockedAssetName",
    function ($resource) {
        return $resource(window.apiPrefix + '/lockedAssetName', {})
    }).factory("LockedDetailByAddress",
    function ($resource) {
        return $resource(window.apiPrefix + '/lockedDetailByAddress', {})
    });

 
// Source: public/src/js/services/masternode.js
angular.module('insight.masternode').factory('MasterNode', function ($resource) {
    return $resource(window.apiPrefix + '/masternode', {
        pageNum: '@pageNum',
        params: '@params'
    }, {
        get: {
            method: 'GET',
            interceptor: {
                response: function (res) {
                    return res.data;
                },
                responseError: function (res) {
                    if (res.status === 404) {
                        return res;
                    }
                }
            }
        }
    })
}).factory("updateMatterNodeStatus",
    function ($resource) {
        return $resource(window.apiPrefix + '/updateMatterNodeStatus')
    });


// Source: public/src/js/services/socket.js
var ScopedSocket = function (socket, $rootScope) {
    this.socket = socket;
    this.$rootScope = $rootScope;
    this.listeners = [];
};

ScopedSocket.prototype.removeAllListeners = function (opts) {
    if (!opts) opts = {};
    for (var i = 0; i < this.listeners.length; i++) {
        var details = this.listeners[i];
        if (opts.skipConnect && details.event === 'connect') {
            continue;
        }
        this.socket.removeListener(details.event, details.fn);
    }
    this.listeners = [];
};

ScopedSocket.prototype.on = function (event, callback) {
    var socket = this.socket;
    var $rootScope = this.$rootScope;

    var wrapped_callback = function () {
        var args = arguments;
        $rootScope.$apply(function () {
            callback.apply(socket, args);
        });
    };
    socket.on(event, wrapped_callback);

    this.listeners.push({
        event: event,
        fn: wrapped_callback
    });
};

ScopedSocket.prototype.emit = function (event, data, callback) {
    var socket = this.socket;
    var $rootScope = this.$rootScope;
    var args = Array.prototype.slice.call(arguments);

    args.push(function () {
        var args = arguments;
        $rootScope.$apply(function () {
            if (callback) {
                callback.apply(socket, args);
            }
        });
    });

    socket.emit.apply(socket, args);
};

angular.module('insight.socket').factory('getSocket', function ($rootScope) {
    var socket = io.connect(null, {
        'reconnect': true,
        'reconnection delay': 500,
    });
    return function (scope) {
        var scopedSocket = new ScopedSocket(socket, $rootScope);
        scope.$on('$destroy', function () {
            scopedSocket.removeAllListeners();
        });
        socket.on('connect', function () {
            scopedSocket.removeAllListeners({
                skipConnect: true
            });
        });
        return scopedSocket;
    };
});

// Source: public/src/js/services/status.js
angular.module('insight.status').factory('Status', function ($resource) {
    return $resource(window.apiPrefix + '/status', {
        q: '@q'
    });
}).factory('Sync', function ($resource) {
    return $resource(window.apiPrefix + '/sync');
}).factory('PeerSync', function ($resource) {
    return $resource(window.apiPrefix + '/peer');
});

// Source: public/src/js/services/transactions.js
angular.module('insight.transactions').factory('Transaction', function ($resource) {
    return $resource(window.apiPrefix + '/tx/:txId', {
        txId: '@txId'
    }, {
        get: {
            method: 'GET',
            interceptor: {
                response: function (res) {
                    return res.data;
                },
                responseError: function (res) {
                    if (res.status === 404) {
                        return res;
                    }
                }
            }
        }
    });
}).factory('TransactionsByBlock', function ($resource) {
    return $resource(window.apiPrefix + '/txs', {
        block: '@block'
    });
}).factory('TransactionsByAddress', function ($resource) {
    return $resource(window.apiPrefix + '/txs', {
        address: '@address'
    });
}).factory('Transactions', function ($resource) {
    return $resource(window.apiPrefix + '/txs');
});

// Source: public/src/js/services/unlockHeight.js
angular.module('insight.unlockHeight').factory('UnlockHeight', function ( config ) {

    return {
        /**
         * SPOS 共识算法下的解锁高度重新计算
         * @param unlockHeight  交易解锁高度
         * @param blockHeight   交易入块高度
         * @returns {*}
         */
        getSposNewUnlockHeight : function( unlockHeight , blockHeight ){
            // SPOS 算法生效高度
            var sposStartHeight = config.spos.height;
            // POW 算法下的产块速度
            var powSpeed = config.pow.blockedSpeed;
            // SPOS 算法的产块速度
            var sposSpeed = config.spos.blockedSpeed;
            if ( sposStartHeight <= 0 || unlockHeight <= sposStartHeight ){
                return unlockHeight;
            }
            // 如果入块高度大于SPOS算法开始的高度,则不需要转换了.
            if ( blockHeight && (blockHeight >= sposStartHeight) ){
                return unlockHeight;
            }
            /*
             * 转换规则:锁定时间一致
             *  POW 算法下产生 N 个区块的时间 = SPOS 算法下产生 M 个区块的时间
             *  因为不同算法下的产块速度不一样,所以 SPOS 需要在更高的区块后才能解锁.
             *  ( H[unlockHeight] - H[sposStartHeight] ) * Speed[POW] = ( H[newUnlockHeight] - H[sposStartHeight] ) * Speed[SPOS]
             */
            var newUnlockHeight = ( unlockHeight - sposStartHeight ) * ( powSpeed / sposSpeed ) + sposStartHeight;
            console.log( 'UnlockHeight:' + unlockHeight + ' , Now newUnlockHeight:' + newUnlockHeight );
            return newUnlockHeight;
        }
    }

});

 
// Source: public/src/js/directives.js
var ZeroClipboard = window.ZeroClipboard;

angular.module('insight').directive('scroll', function ($window) {
    return function (scope, element, attrs) {
        angular.element($window).bind('scroll', function () {
            if (this.pageYOffset >= 200) {
                scope.secondaryNavbar = true;
            } else {
                scope.secondaryNavbar = false;
            }
            scope.$apply();
        });
    };
}).directive('whenScrolled', function ($window) {
    return {
        restric: 'A',
        link: function (scope, elm, attr) {
            var pageHeight, clientHeight, scrollPos;
            $window = angular.element($window);
            var handler = function () {
                pageHeight = window.document.documentElement.scrollHeight;
                clientHeight = window.document.documentElement.clientHeight;
                scrollPos = window.pageYOffset;

                if (pageHeight - (scrollPos + clientHeight) === 0) {
                    scope.$apply(attr.whenScrolled);
                }
            };
            $window.on('scroll', handler);
            scope.$on('$destroy', function () {
                return $window.off('scroll', handler);
            });
        }
    };
}).directive('clipCopy', function () {
    ZeroClipboard.config({
        moviePath: '/lib/zeroclipboard/ZeroClipboard.swf',
        trustedDomains: ['*'],
        allowScriptAccess: 'always',
        forceHandCursor: true
    });

    return {
        restric: 'A',
        scope: {clipCopy: '=clipCopy'},
        template: '<div class="tooltip fade right in"><div class="tooltip-arrow"></div><div class="tooltip-inner">Copied!</div></div>',
        link: function (scope, elm) {
            var clip = new ZeroClipboard(elm);
            clip.on('load', function (client) {
                var onMousedown = function (client) {
                    client.setText(scope.clipCopy);
                };
                client.on('mousedown', onMousedown);
                scope.$on('$destroy', function () {
                    client.off('mousedown', onMousedown);
                });
            });
            clip.on('noFlash wrongflash', function () {
                return elm.remove();
            });
        }
    };
}).directive('focus', function ($timeout) {
    return {
        scope: {
            trigger: '@focus'
        },
        link: function (scope, element) {
            scope.$watch('trigger', function (value) {
                if (value === "true") {
                    $timeout(function () {
                        element[0].focus();
                    });
                }
            });
        }
    };
});

// Source: public/src/js/filters.js
angular.module('insight').filter('startFrom', function () {
    return function (input, start) {
        start = +start; //parse to int
        return input.slice(start);
    }
}).filter('split', function () {
    return function (input, delimiter) {
        var delimiter = delimiter || ',';
        return input.split(delimiter);
    }
});

// Source: public/src/js/config.js
//Setting up route
angular.module('insight').config(function ($routeProvider) {
    $routeProvider.when('/block/:blockHash', {
        templateUrl: 'views/block.html',
        title: 'Safe Block '
    }).when('/block-index/:blockHeight', {
        controller: 'BlocksController',
        templateUrl: 'views/redirect.html'
    }).when('/tx/send', {
        templateUrl: 'views/transaction_sendraw.html',
        title: 'Broadcast Raw Transaction'
    }).when('/tx/:txId/:v_type?/:v_index?', {
        templateUrl: 'views/transaction.html',
        title: 'Safe Transaction '
    }).when('/', {
        templateUrl: 'views/index.html',
        title: 'Home'
    }).when('/blocks', {
        templateUrl: 'views/block_list.html',
        title: 'Safe Blocks solved Today'
    }).when('/blocks-date/:blockDate/:startTimestamp?', {
        templateUrl: 'views/block_list.html',
        title: 'Safe Blocks solved '
    }).when('/address/:addrStr', {
        templateUrl: 'views/address.html',
        title: 'Safe Address '
    }).when('/addressAssets/:addrStr/:assetId', {
        templateUrl: 'views/address.html',
        title: 'Safe Address '
    }).when('/status', {
        templateUrl: 'views/status.html',
        title: 'Status'
    }).when('/messages/verify', {
        templateUrl: 'views/messages_verify.html',
        title: 'Verify Message'
    }).when('/MasterNode', {
        templateUrl: 'views/masternode.html',
        title: 'Masternode'
    }).when('/masterNodeMobile', {
        templateUrl: 'views/masterNodeMobile.html',
        title: 'master Node Mobile'
    }).when('/masterNodeApp', {
        templateUrl: 'views/masterNodeApp.html',
        title: 'master Node App'
    }).when('/Masternode/:page', {
        templateUrl: 'views/masternode.html',
        title: 'Master Node'
    }).when('/Assets', {
        templateUrl: 'views/assets.html',
        title: 'Assets'
    }).when('/Assets/:name', {
        templateUrl: 'views/assets.html',
        title: 'Assets'
    }).when('/AssetsDetail/:assetsId', {
        templateUrl: 'views/assetsDetail.html',
        title: 'AssetsDetail'
    }).when('/locked', {
        templateUrl: 'views/lockingAddr.html',
        title: 'Locked Rankings'
    }).when('/lockedDetail/:address/:assetName', {
        templateUrl: 'views/lockedAddrDetail.html',
        title: 'Assets Detail'
    }).when('/rankings', {
        templateUrl: 'views/lockingAddr.html',
        title: 'Assets Ranking'
    }).when('/statistic', {
        templateUrl: 'views/statistic.html',
        title: 'Statistic'
    }).otherwise({
        templateUrl: 'views/404.html',
        title: 'Error'
    });
});

//Setting HTML5 Location Mode
angular.module('insight').config(function ($locationProvider) {
    $locationProvider.html5Mode(true);
    $locationProvider.hashPrefix('!');
}).run(function ($rootScope, $route, $location, $routeParams, $anchorScroll, ngProgress, gettextCatalog, amMoment) {
    gettextCatalog.currentLanguage = defaultLanguage;
    amMoment.changeLocale(defaultLanguage);
    $rootScope.$on('$routeChangeStart', function () {
        ngProgress.start();
    });

    $rootScope.$on('$routeChangeSuccess', function () {
        ngProgress.complete();

        //Change page title, based on Route information
        $rootScope.titleDetail = '';
        $rootScope.title = $route.current.title;
        $rootScope.isCollapsed = true;
        $rootScope.currentAddr = null;

        $location.hash($routeParams.scrollTo);
        $anchorScroll();
    });
});

// Source: public/src/js/init.js
angular.element(document).ready(function () {

});

// Source: public/src/js/translations.js
angular.module('insight').run(['gettextCatalog', function (gettextCatalog) {
/* jshint -W100 */
    gettextCatalog.setStrings('de_DE', {"(Input unconfirmed)":"(Eingabe unbestätigt)","404 Page not found :(":"404 Seite nicht gefunden :(","<strong>insight</strong>  is an <a href=\"http://live.insight.is/\" target=\"_blank\">open-source Safe blockchain explorer</a> with complete REST and websocket APIs that can be used for writing web wallets and other apps  that need more advanced blockchain queries than provided by safed RPC.  Check out the <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">source code</a>.":"<strong>insight</strong> ist ein <a href=\"http://live.insight.is/\" target=\"_blank\">Open Source Safe Blockchain Explorer</a> mit vollständigen REST und Websocket APIs um eigene Wallets oder Applikationen zu implementieren. Hierbei werden fortschrittlichere Abfragen der Blockchain ermöglicht, bei denen die RPC des safed nicht mehr ausreichen. Der aktuelle <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">Quellcode</a> ist auf Github zu finden.","<strong>insight</strong> is still in development, so be sure to report any bugs and provide feedback for improvement at our <a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">github issue tracker</a>.":"<strong>insight</strong> befindet sich aktuell noch in der Entwicklung. Bitte sende alle gefundenen Fehler (Bugs) und Feedback zur weiteren Verbesserung an unseren <a href=\"https://github.com/safepay/insight-ui-safe/issues\" target=\"_blank\">Github Issue Tracker</a>.","About":"Über insight","Address":"Adresse","Age":"Alter","Application Status":"Programmstatus","Best Block":"Bester Block","Safe node information":"Safe-Node Info","Block":"Block","Block Reward":"Belohnung","Blocks":"Blöcke","Bytes Serialized":"Serialisierte Bytes","Can't connect to safed to get live updates from the p2p network. (Tried connecting to safed at {{host}}:{{port}} and failed.)":"Es ist nicht möglich mit safed zu verbinden um live Aktualisierungen vom P2P Netzwerk zu erhalten. (Verbindungsversuch zu safed an {{host}}:{{port}} ist fehlgeschlagen.)","Can't connect to insight server. Attempting to reconnect...":"Keine Verbindung zum insight-Server möglich. Es wird versucht die Verbindung neu aufzubauen...","Can't connect to internet. Please, check your connection.":"Keine Verbindung zum Internet möglich, bitte Zugangsdaten prüfen.","Complete":"Vollständig","Confirmations":"Bestätigungen","Search for block, transaction ,assetsId or address":"Such - Block, Handel, vermögenswerte Oder Adresse","Conn":"Verbindungen","Connections to other nodes":"Verbindungen zu Nodes","Current Blockchain Tip (insight)":"Aktueller Blockchain Tip (insight)","Current Sync Status":"Aktueller Status","Details":"Details","Difficulty":"Schwierigkeit","Double spent attempt detected. From tx:":"Es wurde ein \"double Spend\" Versuch erkannt.Von tx:","Error!":"Fehler!","Fee":"Gebühr","Final Balance":"Schlussbilanz","Finish Date":"Fertigstellung","Go to home":"Zur Startseite","Hash Serialized":"Hash Serialisiert","Height":"Höhe","Included in Block":"Eingefügt in Block","Incoherence in levelDB detected:":"Es wurde eine Zusammenhangslosigkeit in der LevelDB festgestellt:","Info Errors":"Fehlerbeschreibung","Initial Block Chain Height":"Ursprüngliche Blockchain Höhe","Input":"Eingänge","Last Block":"Letzter Block","Last Block Hash (safed)":"Letzter Hash (safed)","Latest Blocks":"Letzte Blöcke","Latest Transactions":"Letzte Transaktionen","Loading Address Information":"Lade Adressinformationen","Loading Block Information":"Lade Blockinformation","Loading Selected Date...":"Lade gewähltes Datum...","Loading Transaction Details":"Lade Transaktionsdetails","Loading Transactions...":"Lade Transaktionen...","Loading...":"Lade...","Mined Time":"Block gefunden (Mining)","Mined by":"Gefunden von","Mining Difficulty":"Schwierigkeitgrad","Next Block":"Nächster Block","No Inputs (Newly Generated Coins)":"Keine Eingänge (Neu generierte Coins)","No blocks yet.":"Keine Blöcke bisher.","No matching records found!":"Keine passenden Einträge gefunden!","No. Transactions":"Anzahl Transaktionen","Number Of Transactions":"Anzahl der Transaktionen","Output":"Ausgänge","Powered by":"Powered by","Previous Block":"Letzter Block","Protocol version":"Protokollversion","Proxy setting":"Proxyeinstellung","Received Time":"Eingangszeitpunkt","Redirecting...":"Umleitung...","Search for block, transaction or address":"Suche Block, Transaktion oder Adresse","Search for block, transaction":"Suche Block, Transaktion","See all blocks":"Alle Blöcke anzeigen","Show Transaction Output data":"Zeige Abgänge","Show all":"Zeige Alles","Show input":"Zeige Eingänge","Show less":"Weniger anzeigen","Show more":"Mehr anzeigen","Size":"Größe","Size (bytes)":"Größe (bytes)","Skipped Blocks (previously synced)":"Verworfene Blöcke (bereits syncronisiert)","Start Date":"Startdatum","Status":"Status","Summary":"Zusammenfassung","Summary <small>confirmed</small>":"Zusammenfassung <small>bestätigt</small>","Sync Progress":"Fortschritt","Sync Status":"Syncronisation","Sync Type":"Art der Syncronisation","Synced Blocks":"Syncronisierte Blöcke","Testnet":"Testnet aktiv","There are no transactions involving this address.":"Es gibt keine Transaktionen zu dieser Adressse","Time Offset":"Zeitoffset zu UTC","Timestamp":"Zeitstempel","Today":"Heute","Total Amount":"Gesamtsumme","Total Received":"Insgesamt empfangen","Total Sent":"Insgesamt gesendet","Transaction":"Transaktion","Transaction Output Set Information":"Transaktions Abgänge","Transaction Outputs":"Abgänge","Transactions":"Transaktionen","Type":"Typ","Unconfirmed":"Unbestätigt","Unconfirmed Transaction!":"Unbestätigte Transaktion!","Unconfirmed Txs Balance":"Unbestätigtes Guthaben","Value Out":"Wert","Version":"Version","Waiting for blocks...":"Warte auf Blöcke...","Waiting for transactions...":"Warte auf Transaktionen...","by date.":"nach Datum.","first seen at":"zuerst gesehen am","mined":"gefunden","mined on:":"vom:","Waiting for blocks":"Warte auf Blöcke","Masternode":"Master-Knoten","debit safe address":"Hypothek Adresse","status":"status","IP":"IP","search for ip or debit safe address":"Suche nach IP oder Debit Safe Adresse","ip or address":"IP or Adresse","Next":"Nächste ","Previous":"Vorherige ","Waiting for masterNode...":"Warten auf Laden masternode","No masternode yet.":"Noch nicht masternode","asset name":"asset - namen ","asset short name":"asset kurzen namen ","already Issue":"bereits thema","Is it destroyed":"ist es zerstört. ","destory Amout":"Die mengen zerstört","describe":"beschreiben","remarks":"bemerkungen","candy Amount":"candy betrag","date":"datum","List of assets":"Liste der Vermögenswerte","assets id":"Der Name","issue Time":"Freigabe Zeit","total issued":"Insgesamt ausgestellt","Circulation":"Ausgestellt","Waiting for assets...":"Warten auf das Laden von Asset-Informationen","No assets yet.":"Noch keine Asset-Informationen","assets summary":"Zusammenfassung der Assets","assets":"Assets","Loading assets Detail Information":"Laden von Assets Detailinformationen","Can be divided":"Ist es trennbar","sponsor":"Promoter","smallest unit":"Kleinste Einheit","release record":"Datensatz freigeben","initial release":"Erstveröffentlichung","accep address":"Adresse erhalten","transaction ID":"Transaktionen ID","unlock height":"Höhe freischalten","lock height":"Höhe verriegeln","register app":"register - app ","add app authority":"fügen sie app - behörde ","delete app authority":"Löschen macht","add extend data":"Daten zu erstellen","issue assets":"Assets ausgeben","additional assets issued":"zusätzliche Vermögenswerte ausgegeben","transfer asset":"Die übertragung der vermögenswerte","destory asset":"Vernichtung von vermögen","change asset":"Vermögenswerte","send candy":"Süßigkeiten","get candy":"Die gesammelten süßigkeiten","Lastest block from date":"Heutige letzte Zeit","Older blocks from this date":"Siehe frühere Blöcke","total":"gesamt","Page count":"Seiten insge","jump":"Springen","Asset type":"Asset - Klassen","Lock amount":"Gesperrter Betrag","Available balance":"Verfügbarer betrag","Fee Rate":"Ausgaben","scriptPubKey":"Öffentliches Schlüsselscript","true":"Kann","false":"Nein","master node list":"Master-Knotenliste","master node of concern":"Fokussierter Master-Knoten","operation":"Operation"});
    gettextCatalog.setStrings('es', {"(Input unconfirmed)":"(Entrada sin confirmar)","404 Page not found :(":"404 Página no encontrada :(","<strong>insight</strong>  is an <a href=\"http://live.insight.is/\" target=\"_blank\">open-source Safe blockchain explorer</a> with complete REST and websocket APIs that can be used for writing web wallets and other apps  that need more advanced blockchain queries than provided by safed RPC.  Check out the <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">source code</a>.":"<strong>insight</strong>  es un <a href=\"http://live.insight.is/\" target=\"_blank\">explorador de bloques de Safe open-source</a> con un completo conjunto de REST y APIs de websockets que pueden ser usadas para escribir monederos de Safe y otras aplicaciones que requieran consultar un explorador de bloques.  Obtén el código en <a href=\"http://github.com/safepay/insight\" target=\"_blank\">el repositorio abierto de Github</a>.","<strong>insight</strong> is still in development, so be sure to report any bugs and provide feedback for improvement at our <a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">github issue tracker</a>.":"<strong>insight</strong> esta en desarrollo aún, por ello agradecemos que nos reporten errores o sugerencias para mejorar el software. <a href=\"https://github.com/safepay/insight-ui-safe/issues\" target=\"_blank\">Github issue tracker</a>.","About":"Acerca de","Address":"Dirección","Age":"Edad","Application Status":"Estado de la Aplicación","Best Block":"Mejor Bloque","Safe node information":"Información del nodo Safe","Block":"Bloque","Block Reward":"Bloque Recompensa","Blocks":"Bloques","Bytes Serialized":"Bytes Serializados","Can't connect to safed to get live updates from the p2p network. (Tried connecting to safed at {{host}}:{{port}} and failed.)":"No se pudo conectar a safed para obtener actualizaciones en vivo de la red p2p. (Se intentó conectar a safed de {{host}}:{{port}} y falló.)","Can't connect to insight server. Attempting to reconnect...":"No se pudo conectar al servidor insight. Intentando re-conectar...","Can't connect to internet. Please, check your connection.":"No se pudo conectar a Internet. Por favor, verifique su conexión.","Complete":"Completado","Confirmations":"Confirmaciones","Search for block, transaction ,assetsId or address":"El bloque de búsqueda, transacciones, activos o dirección","Conn":"Con","Connections to other nodes":"Conexiones a otros nodos","Current Blockchain Tip (insight)":"Actual Blockchain Tip (insight)","Current Sync Status":"Actual Estado de Sincronización","Details":"Detalles","Difficulty":"Dificultad","Double spent attempt detected. From tx:":"Intento de doble gasto detectado. De la transacción:","Error!":"¡Error!","Fee":"Tasa","Final Balance":"Balance Final","Finish Date":"Fecha Final","Go to home":"Volver al Inicio","Hash Serialized":"Hash Serializado","Height":"Altura","Included in Block":"Incluido en el Bloque","Incoherence in levelDB detected:":"Detectada una incoherencia en levelDB:","Info Errors":"Errores de Información","Initial Block Chain Height":"Altura de la Cadena en Bloque Inicial","Input":"Entrada","Last Block":"Último Bloque","Last Block Hash (safed)":"Último Bloque Hash (safed)","Latest Blocks":"Últimos Bloques","Latest Transactions":"Últimas Transacciones","Loading Address Information":"Cargando Información de la Dirección","Loading Block Information":"Cargando Información del Bloque","Loading Selected Date...":"Cargando Fecha Seleccionada...","Loading Transaction Details":"Cargando Detalles de la Transacción","Loading Transactions...":"Cargando Transacciones...","Loading...":"Cargando...","Mined Time":"Hora de Minado","Mined by":"Minado por","Mining Difficulty":"Dificultad de Minado","Next Block":"Próximo Bloque","No Inputs (Newly Generated Coins)":"Sin Entradas (Monedas Recién Generadas)","No blocks yet.":"No hay bloques aún.","No matching records found!":"¡No se encontraron registros coincidentes!","No. Transactions":"Nro. de Transacciones","Number Of Transactions":"Número de Transacciones","Output":"Salida","Powered by":"Funciona con","Previous Block":"Bloque Anterior","Protocol version":"Versión del protocolo","Proxy setting":"Opción de proxy","Received Time":"Hora de Recibido","Redirecting...":"Redireccionando...","Search for block, transaction or address":"Buscar bloques, transacciones o direcciones","Search for block, transaction ":"Buscar bloques, transacciones","See all blocks":"Ver todos los bloques","Show Transaction Output data":"Mostrar dato de Salida de la Transacción","Show all":"Mostrar todos","Show input":"Mostrar entrada","Show less":"Ver menos","Show more":"Ver más","Size":"Tamaño","Size (bytes)":"Tamaño (bytes)","Skipped Blocks (previously synced)":"Bloques Saltados (previamente sincronizado)","Start Date":"Fecha de Inicio","Status":"Estado","Summary":"Resumen","Summary <small>confirmed</small>":"Resumen <small>confirmados</small>","Sync Progress":"Proceso de Sincronización","Sync Status":"Estado de Sincronización","Sync Type":"Tipo de Sincronización","Synced Blocks":"Bloques Sincornizados","Testnet":"Red de prueba","There are no transactions involving this address.":"No hay transacciones para esta dirección","Time Offset":"Desplazamiento de hora","Timestamp":"Fecha y hora","Today":"Hoy","Total Amount":"Cantidad Total","Total Received":"Total Recibido","Total Sent":"Total Enviado","Transaction":"Transacción","Transaction Output Set Information":"Información del Conjunto de Salida de la Transacción","Transaction Outputs":"Salidas de la Transacción","Transactions":"Transacciones","Type":"Tipo","Unconfirmed":"Sin confirmar","Unconfirmed Transaction!":"¡Transacción sin confirmar!","Unconfirmed Txs Balance":"Balance sin confirmar","Value Out":"Valor de Salida","Version":"Versión","Waiting for blocks...":"Esperando bloques...","Waiting for transactions...":"Esperando transacciones...","by date.":"por fecha.","first seen at":"Visto a","mined":"minado","mined on:":"minado el:","Waiting for blocks":"Esperando bloques","Masternode":"Nodo maestro","debit safe address":"Debito direccion segura","status":"Situación","IP":"IP","search for ip or debit safe address":"Busqueda por IP o debito direccion segura","ip or address":" IP o dirección","Next":"siguiente","Previous":"anterior","Waiting for masterNode...":"Esperando para el nodo maestro","No masternode yet.":"No master node todavia","asset name":"Nombre del bien","asset short name":"Activo nombre corto","already Issue":"Ya la cuestión","Is it destroyed":"Es destruido","destory Amout":"La destrucción de cantidades","describe":"Describir","remarks":"Observaciones","candy Amount":"Candy cantidad","date":"Fecha","List of assets":"Lista de activos","assets id":"El nombre","issue Time":"Cuestión de tiempo","total issued":"Total emitido","Circulation":"La emisión se ha","Waiting for assets...":"Esperar a que la carga de los activos de información","No assets yet.":"Todavía no hay información de activos","assets summary":"Los detalles de los activos","assets":"De los activos","Loading assets Detail Information":"Se carga la información de activos","Can be divided":"Si no puede dividirse","sponsor":"Promotores","smallest unit":"La unidad mínima de","release record":"La emisión de registros","initial release":"Primera emisión","accep address":"Recibir la dirección","transaction ID":"La transacción ID","unlock height":"El desbloqueo de la altura","lock height":"El bloqueo de la altura","register app":"Registro App","add app authority":"Añadir app autoridad","delete app authority":"Eliminar los permisos","add extend data":"Con los datos de la creación de","issue assets":"La emisión de los","additional assets issued":"Emisión adicional de activos","transfer asset":"La transferencia de activos","destory asset":"La destrucción de activos","change asset":"El cambio de los activos","send candy":"La expedición de dulces","get candy":"Recibir dulces","Lastest block from date":"La última hora de hoy","Older blocks from this date":"Ver antes de bloque","total":"Número","Page count":"total páginas","jump":"El salto","Asset type":"Tipos de activos","Lock amount":"El importe de bloqueo","Available balance":"El importe disponible","Fee Rate":"Los gastos","scriptPubKey":"Script de clave pública","true":"Puede","false":"No","master node list":"Lista de nodos maestros","master node of concern":"Nodo maestro enfocado","operation":"La operación"});
    gettextCatalog.setStrings('ja', {"(Input unconfirmed)":"(入力は未検証です)","404 Page not found :(":"404 ページがみつかりません (´・ω・`)","<strong>insight</strong>  is an <a href=\"http://live.insight.is/\" target=\"_blank\">open-source Safe blockchain explorer</a> with complete REST and websocket APIs that can be used for writing web wallets and other apps  that need more advanced blockchain queries than provided by safed RPC.  Check out the <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">source code</a>.":"<strong>insight</strong>は、safed RPCの提供するものよりも詳細なブロックチェインへの問い合わせを必要とするウェブウォレットやその他のアプリを書くのに使える、完全なRESTおよびwebsocket APIを備えた<a href=\"http://live.insight.is/\" target=\"_blank\">オープンソースのビットコインブロックエクスプローラ</a>です。<a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">ソースコード</a>を確認","<strong>insight</strong> is still in development, so be sure to report any bugs and provide feedback for improvement at our <a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">github issue tracker</a>.":"<strong>insight</strong>は現在開発中です。<a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">githubのissueトラッカ</a>にてバグの報告や改善案の提案をお願いします。","About":"はじめに","Address":"アドレス","Age":"生成後経過時間","An error occured in the verification process.":"検証過程でエラーが発生しました。","An error occured:<br>{{error}}":"エラーが発生しました:<br>{{error}}","Application Status":"アプリケーションの状態","Best Block":"最良ブロック","Safe comes with a way of signing arbitrary messages.":"Safeには任意のメッセージを署名する昨日が備わっています。","Safe node information":"Safeノード情報","Block":"ブロック","Block Reward":"ブロック報酬","Blocks":"ブロック","Broadcast Raw Transaction":"生のトランザクションを配信","Bytes Serialized":"シリアライズ後の容量 (バイト)","Can't connect to safed to get live updates from the p2p network. (Tried connecting to safed at {{host}}:{{port}} and failed.)":"P2Pネットワークからライブ情報を取得するためにsafedへ接続することができませんでした。({{host}}:{{port}} への接続を試みましたが、失敗しました。)","Can't connect to insight server. Attempting to reconnect...":"insight サーバに接続できません。再接続しています...","Can't connect to internet. Please, check your connection.":"インターネットに接続できません。コネクションを確認してください。","Complete":"完了","Confirmations":"検証数","Search for block, transaction ,assetsId or address":"検索エリア、取引、資産、またはアドレス","Conn":"接続数","Connections to other nodes":"他ノードへの接続","Current Blockchain Tip (insight)":"現在のブロックチェインのTip (insight)","Current Sync Status":"現在の同期状況","Details":"詳細","Difficulty":"難易度","Double spent attempt detected. From tx:":"二重支払い攻撃をこのトランザクションから検知しました：","Error message:":"エラーメッセージ:","Error!":"エラー！","Fee":"手数料","Final Balance":"最終残高","Finish Date":"終了日時","Go to home":"ホームへ","Hash Serialized":"シリアライズデータのハッシュ値","Height":"ブロック高","Included in Block":"取り込まれたブロック","Incoherence in levelDB detected:":"levelDBの破損を検知しました:","Info Errors":"エラー情報","Initial Block Chain Height":"起動時のブロック高","Input":"入力","Last Block":"直前のブロック","Last Block Hash (safed)":"直前のブロックのハッシュ値 (safed)","Latest Blocks":"最新のブロック","Latest Transactions":"最新のトランザクション","Loading Address Information":"アドレス情報を読み込んでいます","Loading Block Information":"ブロック情報を読み込んでいます","Loading Selected Date...":"選択されたデータを読み込んでいます...","Loading Transaction Details":"トランザクションの詳細を読み込んでいます","Loading Transactions...":"トランザクションを読み込んでいます...","Loading...":"ロード中...","Message":"メッセージ","Mined Time":"採掘時刻","Mined by":"採掘者","Mining Difficulty":"採掘難易度","Next Block":"次のブロック","No Inputs (Newly Generated Coins)":"入力なし (新しく生成されたコイン)","No blocks yet.":"ブロックはありません。","No matching records found!":"一致するレコードはありません！","No. Transactions":"トランザクション数","Number Of Transactions":"トランザクション数","Output":"出力","Powered by":"Powered by","Previous Block":"前のブロック","Protocol version":"プロトコルバージョン","Proxy setting":"プロキシ設定","Raw transaction data":"トランザクションの生データ","Raw transaction data must be a valid hexadecimal string.":"生のトランザクションデータは有効な16進数でなければいけません。","Received Time":"受信時刻","Redirecting...":"リダイレクトしています...","Search for block, transaction or address":"ブロック、トランザクション、アドレスを検索","Search for block, transaction":"検索ブロック、取引","See all blocks":"すべてのブロックをみる","Send transaction":"トランザクションを送信","Show Transaction Output data":"トランザクションの出力データをみる","Show all":"すべて表示","Show input":"入力を表示","Show less":"隠す","Show more":"表示する","Signature":"署名","Size":"サイズ","Size (bytes)":"サイズ (バイト)","Skipped Blocks (previously synced)":"スキップされたブロック (同期済み)","Start Date":"開始日時","Status":"ステータス","Summary":"概要","Summary <small>confirmed</small>":"サマリ <small>検証済み</small>","Sync Progress":"同期の進捗状況","Sync Status":"同期ステータス","Sync Type":"同期タイプ","Synced Blocks":"同期されたブロック数","Testnet":"テストネット","The message failed to verify.":"メッセージの検証に失敗しました。","The message is verifiably from {{verification.address}}.":"メッセージは{{verification.address}}により検証されました。","There are no transactions involving this address.":"このアドレスに対するトランザクションはありません。","This form can be used to broadcast a raw transaction in hex format over\n        the Safe network.":"このフォームでは、16進数フォーマットの生のトランザクションをSafeネットワーク上に配信することができます。","This form can be used to verify that a message comes from\n        a specific Safe address.":"このフォームでは、メッセージが特定のSafeアドレスから来たかどうかを検証することができます。","Time Offset":"時間オフセット","Timestamp":"タイムスタンプ","Today":"今日","Total Amount":"safe総量","Total Received":"総入金額","Total Sent":"総送金額","Transaction":"トランザクション","Transaction Output Set Information":"トランザクションの出力セット情報","Transaction Outputs":"トランザクションの出力","Transaction succesfully broadcast.<br>Transaction id: {{txid}}":"トランザクションの配信に成功しました。<br>トランザクションID: {{txid}}","Transactions":"トランザクション","Type":"タイプ","Unconfirmed":"未検証","Unconfirmed Transaction!":"未検証のトランザクションです！","Unconfirmed Txs Balance":"未検証トランザクションの残高","Value Out":"出力値","Verify":"検証","Verify signed message":"署名済みメッセージを検証","Version":"バージョン","Waiting for blocks...":"ブロックを待っています...","Waiting for transactions...":"トランザクションを待っています...","by date.":"日毎。","first seen at":"最初に発見された日時","mined":"採掘された","mined on:":"採掘日時:","(Mainchain)":"(メインチェーン)","(Orphaned)":"(孤立したブロック)","Bits":"Bits","Block #{{block.height}}":"ブロック #{{block.height}}","BlockHash":"ブロックのハッシュ値","Blocks <br> mined on:":"ブロック <br> 採掘日","Coinbase":"コインベース","Hash":"ハッシュ値","LockTime":"ロック時間","Merkle Root":"Merkleルート","Nonce":"Nonce","Ooops!":"おぉっと！","Output is spent":"出力は使用済みです","Output is unspent":"出力は未使用です","Scan":"スキャン","Show/Hide items details":"アイテムの詳細を表示または隠す","Waiting for blocks":"ブロックを待っています","by date. {{detail}} {{before}}":"日時順 {{detail}} {{before}}","scriptSig":"scriptSig","{{tx.confirmations}} Confirmations":"{{tx.confirmations}} 検証","<span class=\"glyphicon glyphicon-warning-sign\"></span> (Orphaned)":"<span class=\"glyphicon glyphicon-warning-sign\"></span> (孤立したブロック)","<span class=\"glyphicon glyphicon-warning-sign\"></span> Incoherence in levelDB detected: {{vin.dbError}}":"<span class=\"glyphicon glyphicon-warning-sign\"></span> Incoherence in levelDB detected: {{vin.dbError}}","Waiting for blocks <span class=\"loader-gif\"></span>":"ブロックを待っています <span class=\"loader-gif\"></span>","Masternode":"メインノード","debit safe address":"担保アドレス","operation":"操作","master node list":"マスターノードリスト","master node of concern":"集中型マスターノード","status":"状態","IP":"IPアドレス","search for ip or debit safe address":"検索ipアドレス又は抵当","ip or address":"検索ipアドレス又は抵当","Next":"次のページ","Previous":"前のページ","Waiting for masterNode...":"ロードを待つmasternode","No masternode yet.":"まだありませんmasternode","asset name":"資産の名称","asset short name":"資産の略称 ","already Issue":"すでに発行されている","Is it destroyed":"廃棄するかどうか","destory Amout":"数量を廃棄する","describe":"について","remarks":"備考","candy Amount":"キャンディ量","date":"日付","List of assets":"資産リスト","assets id":"名称","issue Time":"発行時間","total issued":"総量を発行する","Circulation":"発行部数","Waiting for assets...":"資産情報のロードを待つ","No assets yet.":"資産情報はまだありません","assets summary":"資産の詳細","assets":"資産","Loading assets Detail Information":"資産情報をロードしている","Can be divided":"分けるかどうか","sponsor":"発起人","smallest unit":"最小単位","release record":"発行記録","initial release":"初発行","accep address":"アドレスを受信する","transaction ID":"取引ID","unlock height":"解除高","lock height":"高さをロックする","register app":"レジスタアプリ","add app authority":"権限を追加","delete app authority":"権限を削除","add extend data":"外帯データの作成","issue assets":"資産を発行する","additional assets issued":"追加発行資産","transfer asset":"資産を譲渡する","destory asset":"資産を廃棄する","change asset":"資産がゼロになる","send candy":"キャンディを支給する","get candy":"菓子を受け取る","Lastest block from date":"今日の最新の時間","Older blocks from this date":"早くのブロックを調べる","total":"総数","Page count":"総ページ数","jump":"飛び回る","Asset type":"資産タイプ","Lock amount":"金額をロックする ","Available balance":"利用可能な金額","Fee Rate":"費用","scriptPubKey":"公開鍵スクリプト","true":"是","false":"いいえ"});
    gettextCatalog.setStrings('zh_CN', {"(Input unconfirmed)":"(输入未确认)","404 Page not found :(":"404 找不到界面 :(","<strong>insight</strong>  is an <a href=\"http://live.insight.is/\" target=\"_blank\">open-source safe blockchain explorer</a> with complete REST and websocket APIs that can be used for writing web wallets and other apps  that need more advanced blockchain queries than provided by safed RPC.  Check out the <a href=\"https://github.com/safepay/insight-ui-safe\" target=\"_blank\">source code</a>.":"<strong>insight</strong>  es un <a href=\"http://live.insight.is/\" target=\"_blank\">explorador de bloques de safe open-source</a> con un completo conjunto de REST y APIs de websockets que pueden ser usadas para escribir monederos de safes y otras aplicaciones que requieran consultar un explorador de bloques.  Obtén el código en <a href=\"http://github.com/safepay/insight\" target=\"_blank\">el repositorio abierto de Github</a>.","<strong>insight</strong> is still in development, so be sure to report any bugs and provide feedback for improvement at our <a href=\"https://github.com/safepay/insight/issues\" target=\"_blank\">github issue tracker</a>.":"<strong>insight</strong> esta en desarrollo aún, por ello agradecemos que nos reporten errores o sugerencias para mejorar el software. <a href=\"https://github.com/safepay/insight-ui-safe/issues\" target=\"_blank\">Github issue tracker</a>.","About":"关于","Address":"钱包地址","Age":"生成时间","Application Status":"状态","Best Block":"最高区块","Safe node information":"Safe节点信息","Network":"网络","Block":"区块","BlockHash":"区块Hash","Block Reward":"区块奖励","Blocks":"区块","Bytes Serialized":"字节序列化","Can't connect to safed to get live updates from the p2p network. (Tried 无法连接到Safed {{host}}:{{port}} 失败)":"No se pudo conectar a safed para obtener actualizaciones en vivo de la 无法连接到safed获得更新的体内","Can't connect to insight server. Attempting to reconnect...":"无法连接到Insight服务器。试图重新连接...","Can't connect to internet. Please, check your connection.":"不能连接到互联网。请检查您的连接。","Complete":"完成","Confirmations":"确认","Conn":"连接","Connections to other nodes":"连接的节点数","Current Blockchain Tip (insight)":"当前最高区块（insight）","Current Sync Status":"当前同步状态","Details":"详情","Difficulty":"难度","Double spent attempt detected. From tx:":"检测到双重花费，交易ID:","Error!":"错误!","Fee":"费用","Final Balance":"最终余额","Finish Date":"最终时间","Go to home":"返回首页","Hash Serialized":"序列化hash","Height":"高度","Included in Block":"来自区块","Incoherence in levelDB detected:":"检测到不是来自levelDB:","Info Errors":"错误信息","Initial Block Chain Height":"区块高度","Input":"输入","Last Block":"最新区块","Last Block Hash (safed)":"最新的区块hash(safed)","Latest Blocks":"最新区块","Latest Transactions":"最新交易","Loading Address Information":"加载地址信息","Loading Block Information":"加载区块信息","Loading Selected Date...":"加载区块信息...","Loading Transaction Details":"加载交易详情","Loading Transactions...":"加载交易...","Loading...":"加载中...","Mined Time":"开采时间","Mined by":"开采人","Mining Difficulty":"开采难度","Next Block":"下一个区块","No Inputs (Newly Generated Coins)":"没有输入(新生成的币)","No blocks yet.":"还没有区块.","No matching records found!":"没有匹配数据!","No. Transactions":"交易数量","Number Of Transactions":"交易数量","Output":"输出","Powered by":"技术支持","Previous Block":"上一个区块","Protocol version":"协议版本","Proxy setting":"代理设置","Received Time":"接收时间","Redirecting...":"重定向...","Search for block, txid ,asset or address":"搜索区块、交易、资产或者地址","See all blocks":"所有区块","Show Transaction Output data":"显示交易输出数据","Show all":"显示全部","Remarks":"备注","Show input":"显示输入","Show less":"收起","Show more":"展开","Size":"大小","Size (bytes)":"大小 (bytes)","Skipped Blocks (previously synced)":"忽略的区块（之前同步）","Start Date":"开始时间","Status":"状态","Summary":"摘要","Summary <small>confirmed</small>":"摘要 <small>确认</small>","Sync Progress":"同步进度","Sync Status":"同步状态","Sync Type":"同步类型","Synced Blocks":"同步区块","Testnet":"测试网络","There are no transactions involving this address.":"没有涉及此地址的交易。","Time Offset":"时间偏移","Timestamp":"时间","Today":"今天","Total Amount":"总金额","Total Received":"总接收","Total Sent":"总发送","Transaction":"交易","Transaction Output Set Information":"交易输出设置信息","Transaction Outputs":"交易输出","Transactions":"交易","Type":"类型","Unconfirmed":"未确认","Unconfirmed Transaction!":"未确认交易!","Unconfirmed Txs Balance":"未确认交易余额","Value Out":"金额","Version":"版本","Waiting for blocks...":"等待区块信息...","Waiting for transactions...":"等待交易信息...","by date.":"日期 ","first seen at":"第一次出现","Reward":"奖励","received":"收到","mined":"开采","mined on:":"生成时间:","Waiting for blocks":"等待区块","Masternodes":"主节点","Collateral Safe Address":"抵押地址","IP":"IP地址","search for IP or collateral SAFE address":"搜索ip或者抵押地址","ip or address":"搜索ip或者抵押地址","Next":"下一页","Waiting for Master Node...":"等待加载master node","No Master Node Yet.":"还没有master node","Asset Name":"资产名称","Asset Short Name":"资产简称","Is Destroyed":"是否可以销毁","Destroyed":"是否可以销毁","Describe":"描述","Already Issue":"累计发行","Candy Amount":"累计糖果总量","Destory Amount":"销毁总量","Date":"时间","List of Assets":"资产列表","Issue Time":"发行时间","Total Issued":"发行总量","Circulation":"流通数量","Volume of TX":"金额","Waiting for Assets...":"等待加载资产信息","No Assets Yet.":"还没有资产信息","Assets Summary":"资产详情","Asset":"资产","Loading Assets Detail Information":"正在加载资产信息","Can be Divided":"是否可分","Sponsor":"发起人","Smallest Unit":"最小单位","Decimal":"小数位","Release Record":"发行记录","All Transactions":"所有交易","Initial Release":"首次发行","Accep Address":"接收地址","Transaction ID":"交易ID","Deposit Amount":"封存金额","Unlock Height":"解锁高度","Lock Height":"锁定高度","Register App":"注册应用","Add App Authority":"添加权限","Delete App Authority":"删除权限","Add Extend Data":"创建外带数据","Issue Assets":"发行资产","Additional Assets Issued":"追加发行资产","Transfer Asset":"转让资产","Destory Asset":"销毁资产","Change Asset":"资产找零","Send Candy":"发放糖果","Get Candy":"领取糖果","Lastest block from date":"今天最新时间","Older blocks from this date":"查看更早的区块","Add to Watchlist":"关注","concern node":"关注节点","abolish concern":"取消关注","masternode":"主节点列表","Watchlisted Masternodes":"关注的主节点","Already concerned":"已经关注","Previous":"上一页","Total":"总节点数","Page Count":"总页数","Jump To":"跳转","Asset type":"资产类型","Lock amount":"锁定金额","Available balance":"可用金额","Fee Rate":"费用","scriptPubKey":"公钥脚本","Total Locking":"总锁定","true":"是","false":"否","Locked Address":"锁定地址","Locked Transaction":"锁定交易","Rank":"排行榜","Number of Locked TX":"锁定交易数量","Lock Amount":"锁定金额","Lock Time":"锁定时间","No lock Transactions And Addresses.":"没有锁定交易和地址","Locked Rankings":"锁定排行榜","Rankings":"排行榜","Search Asset Short Name":"搜索资产简称","Search":"搜索","Asset Amount":"资产金额","Circulation Supply of SAFE":"SAFE 当前流通总量","Statistic":"统计","Amount":"数量","Total Supply":"货币总供应量","Unmined":"未挖出数量","Destoryed":"销毁数量","Locked":"锁定数量","Unlocked":"真实流通数量","Unlocked + Unmortgaged":"未扺押未锁定数量","Addresses":"地址","Holding Addresses":"持币地址数量","Used Addresses":"使用过的地址数量","Number of Masternodes":"主节点数量","Locked on Masternodes":"主节点抵押货币数量","Unlocked on Masternodes":"主节点已解锁资产数量","Supply":"产量","Number of blocks and coins per day":"每天出块数量和币数量","Number of blocks and coins per month":"每月出块数量和币数量","Number of blocks and coins per year":"每年出块数量和币数量"});
/* jshint +W100 */
}]);