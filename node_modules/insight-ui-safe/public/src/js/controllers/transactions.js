'use strict';

angular.module('insight.transactions').controller('transactionsController',
    function ($scope, $rootScope, $routeParams, $location, $compile, Global, Transaction, TransactionsByBlock, TransactionsByAddress, UnlockHeight) {
        $scope.global = Global;
        $scope.loading = false;
        $scope.loadedBy = null;

        $rootScope.UnlockHeight = UnlockHeight;

        var pageNum = 0;
        var pagesTotal = 1;
        var appType = 9999;
        var unlockHeight = 0;
        var thisAssetsType = "";

        var _aggregateItems = function (items) {
            if (!items) return [];
            var l = items.length;

            var ret = [];
            var tmp = {};
            var u = 0;

            console.log( 'FOR() this Array[] vin/vout ... ' );
            for (var i = 0; i < l; i++) {

                var notAddr = false;
                // non standard input
                if (items[i].scriptSig && !items[i].addr) {
                    notAddr = true;
                }

                if (items[i].scriptSig) {
                    if (items[i].scriptSig.asm) {
                        var asmArray = items[i].scriptSig.asm.split(' ');
                        items[i].Confirmations = asmArray[0];
                        items[i].scriptSig = asmArray[1] || " ";
                    }
                }

                // non standard output
                if (items[i].scriptPubKey && !items[i].scriptPubKey.addresses) {
                    items[i].scriptPubKey.addresses = ['Unparsed address [' + u++ + ']'];
                    items[i].notAddr = true;
                    notAddr = true;
                }

                if (items[i].scriptPubKey && items[i].scriptPubKey.addresses.length > 1) {
                    items[i].addr = items[i].scriptPubKey.addresses.join(',');
                    ret.push(items[i]);
                    continue;
                }

                var addr = items[i].addr || (items[i].scriptPubKey && items[i].scriptPubKey.addresses[0]);
                if (items[i].reserve && items[i].reserve.appType >= 200) {  //如果地址是资产交易，则让它与safe交易分开
                    addr += " ";
                } else if (items[i].assetId) {
                    addr += " ";
                }
                if (items[i].unlockHeight > 0) {    //如果地址中有锁定交易，则分开显示  PS: safe和资产交易都分开
                    addr += " ";
                }
                if (!tmp[addr]) {
                    tmp[addr] = {};
                    tmp[addr].value = 0;
                    tmp[addr].count = 0;
                    tmp[addr].addr = addr;
                    tmp[addr].items = [];
                }
                tmp[addr].isSpent = items[i].spentTxId;
                tmp[addr].DepositFlag = items[i].DepositFlag;

                tmp[addr].doubleSpentTxID = tmp[addr].doubleSpentTxID || items[i].doubleSpentTxID;
                tmp[addr].doubleSpentIndex = tmp[addr].doubleSpentIndex || items[i].doubleSpentIndex;
                tmp[addr].dbError = tmp[addr].dbError || items[i].dbError;
                tmp[addr].items.push(items[i]);
                tmp[addr].notAddr = notAddr;
                if (items[i].unlockHeight > 0) {    // 判断锁定
                    tmp[addr].unlockHeight = items[i].unlockHeight;
                    tmp[addr].isLocked = items[i].unlockHeight > unlockHeight;
                }

                var shortName = " SAFE";
                // 如果input中有 asset id
                tmp[addr].value = Decimal(tmp[addr].value).add(items[i].value || 0).toString();
                if (items[i].shortName) {
                    shortName = " " + items[i].shortName;
                    tmp[addr].assetId = items[i].assetId;
                } else if (items[i].reserve && items[i].reserve.appType >= 200 && items[i].reserve.appType < 300) {    //如果这个reverse是发放糖果
                    shortName = " " + items[i].reserve.shortName;
                    tmp[addr].assetId = items[i].reserve.assetId;
                    // } else {
                    // tmp[addr].value = parseFloat((tmp[addr].value + parseFloat(items[i].value)).toFixed(8));
                }
                if (shortName != " SAFE") {
                    thisAssetsType = shortName;
                }
                shortName = shortName.length > 8 ? shortName.slice(0, 6) + "..." : shortName;

                //获取当前交易中最大的一个应用类型
                if (items[i].reserve && items[i].reserve.appType < appType && items[i].reserve.appType != 204) {
                    appType = items[i].reserve.appType;
                }
                tmp[addr].shortName = shortName;       //给新组装的数据加入资产类型 PS：判断或者由API传回来
                tmp[addr].reserve = items[i].reserve || {};
                items[i].shortName = shortName;        //给每个原始数据上面加入资产类型
                if (items[i].unconfirmedInput)
                    tmp[addr].unconfirmedInput = true;
                tmp[addr].count++;
            }

            angular.forEach(tmp, function (v) {
                v.value = convertNum(v.value);
                ret.push(v);
            });
            return ret;
        };

        var _processTX = function (tx) {
            thisAssetsType = "";
            appType = 999;
            unlockHeight = tx.confirmations + tx.blockheight;   // 当前高度 = 交易高度 加 确认数
            console.log('controllers/transaction.js > _aggregateItems(tx.vin[])');
            tx.vinSimple = _aggregateItems(tx.vin);
            console.log('controllers/transaction.js > _aggregateItems(tx.vout[])');
            tx.voutSimple = _aggregateItems(tx.vout);
            tx.appType = appType;
            tx.shortName = thisAssetsType;
        };
        var _paginate = function (data) {
            $scope.loading = false;
            if (!$scope.block) {
                $scope.block = {};
            }
            $scope.block.newReward = 0;
            pagesTotal = data.pagesTotal;
            pageNum += 1;
            // var allReward = 0;
            // var txAllOutputValue = 0;
            data.txs.forEach(function (tx) {
                if (typeof tx.txid != "undefined") {
                    _processTX(tx);
                    $scope.txs.push(tx);
                }
            })
        };

        var _byBlock = function () {
            TransactionsByBlock.get({
                block: $scope.block.hash,
                pageNum: pageNum
            }, function (data) {
                _paginate(data);
            });
        };

        var _byAddress = function (assetsId) {
            TransactionsByAddress.get({
                address: $routeParams.addrStr,
                pageNum: pageNum,
                assetsId: assetsId || ""
            }, function (data) {
                _paginate(data);
            });
        };


        var _findTx = function (txid) {
            console.log('controllers/transactions.js > _findTx() : ' + txid );
            Transaction.get({
                txId: txid
            }, function (tx) {
                console.log('controllers/transaction.js > got the tx from Insight-api-safe ');
                console.log( tx );
                $rootScope.titleDetail = tx.txid.substring(0, 7) + '...';
                $rootScope.flashMessage = null;
                $scope.tx = tx;
                console.log('controllers/transaction.js > _processTx(tx)');
                _processTX(tx);
                tx.assetsId = thisAssetsType;
                $scope.txs.unshift(tx);
            }, function (e) {
                if (e.status === 400) {
                    $rootScope.flashMessage = 'Invalid Transaction ID: ' + $routeParams.txId;
                } else if (e.status === 503) {
                    $rootScope.flashMessage = 'Backend Error. ' + e.data;
                } else {
                    $rootScope.flashMessage = 'Transaction Not Found';
                }
                $location.path('/');
            });
        };
        $scope.findThis = function () {
            _findTx($routeParams.txId);
        };
        // Initial load
        $scope.load = function (from, assetId) {
            $scope.loadedBy = from;
            $scope.loadMore(assetId);
        };

        // Load more transactions for pagination
        $scope.loadMore = function (assetId) {
            if (pageNum < pagesTotal && !$scope.loading) {
                $scope.loading = true;
                if ($scope.loadedBy === 'address') {
                    _byAddress(assetId || "");
                } else {
                    _byBlock();
                }
            }
        };

        // Highlighted txout
        if ($routeParams.v_type == '>' || $routeParams.v_type == '<') {
            $scope.from_vin = $routeParams.v_type == '<';
            $scope.from_vout = $routeParams.v_type == '>';
            $scope.v_index = parseInt($routeParams.v_index);
            $scope.itemsExpanded = true;
        }
        // Init without txs
        $scope.txs = [];
        $scope.$on('tx', function (event, txid) {
            _findTx(txid);
        });

        $scope.FormatFeeRate = function (num) {
            return parseFloat(num.toFixed(8))
        };

        function convertNum(amount) {
            // 判断是否科学计数法,是则进行转换
            var num = 0;
            var result = [];
            if ((amount.indexOf('E') != -1) || (amount.indexOf('e') != -1)) {
                (amount.indexOf('E') != -1) ? num = amount.indexOf('E') : num = amount.indexOf('e');
                var decimal = amount.substr(0, num);
                // devide the sentice efficial number
                var decArr = decimal.split('.', 2);
                // total 10 power
                var power = amount.substr(num + 1, amount.length);
                // symbol + -
                var symbol = power.substr(0, 1);
                power = power.substr(1, power.length);
                power = power * 1.0;
                if ('+' == symbol) {
                    // the number of 0 is power - decArr[1]
                    power = power - decArr[1].length;
                    // the return data
                    while (power > 0) {
                        result.unshift(0);
                        power -= 1;
                    }
                    result.unshift(decArr[1] * 1.0);
                    result.unshift(decArr[0] * 1.0);
                } else {
                    if (decArr[1]) {
                        power = power - decArr[1].length;
                    }
                    power--;
                    result = [0];
                    result.push('.');
                    while (power > 0) {
                        result.push(0);
                        power -= 1;
                    }
                    result.push(decArr);
                }
                result.join("");
                result = result + '';
                amount = result.replace(/,/g, '');
            }
            return amount;
        }
    });

angular.module('insight.transactions').controller('SendRawTransactionController',
    function ($scope, $http) {
        $scope.transaction = '';
        $scope.status = 'ready';  // ready|loading|sent|error
        $scope.txid = '';
        $scope.error = null;

        $scope.formValid = function () {
            return !!$scope.transaction;
        };
        $scope.send = function () {
            var postData = {
                rawtx: $scope.transaction
            };
            $scope.status = 'loading';
            $http.post(window.apiPrefix + '/tx/send', postData)
                .success(function (data, status, headers, config) {
                    if (typeof(data.txid) != 'string') {
                        // API returned 200 but the format is not known
                        $scope.status = 'error';
                        $scope.error = 'The transaction was sent but no transaction id was got back';
                        return;
                    }
                    $scope.status = 'sent';
                    $scope.txid = data.txid;
                }).error(function (data, status, headers, config) {
                $scope.status = 'error';
                if (data) {
                    $scope.error = data;
                } else {
                    $scope.error = "No error message given (connection error?)"
                }
            });
        };
    });
