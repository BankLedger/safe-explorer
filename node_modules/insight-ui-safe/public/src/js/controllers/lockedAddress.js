'use strict';

angular.module('insight.lockedAddress').controller('lockedAddressController',
    function ($scope, $rootScope, LockedAddress, LockedTransaction, LockedAssetName , UnlockHeight , BalanceRanking ) {//$routeParams, $location, Global

        $rootScope.UnlockHeight = UnlockHeight;

        // 锁定地址分页
        var thisAddressPage = 1;
        var jumpAddressPage = 0;
        //锁定交易分页
        var thisTransactionPage = 1;
        var jumpTransactionPage = 0;
        // 资产排行分页
        var thisRankingPage = 1;
        var jumpRankingPage = 0;

        $scope.ExpandedTxID = true;
        $scope.ExpandedMobile = true;
        $scope.ExpandedaddrID = true;
        $scope.assetSearchDiv = false;
        $scope.thisAssetName = "safe";
        var isTransactionTable = false;
        var firstGetAssetNameTime = 0;
        var allAssetNameList = [];


        // 初始显示 Tab ..
        $scope.addressLockedTabClass = "hideElement";
        $scope.txLockedListConentClass = "hideElement";
        $scope.balanceRankingTabClass = "active";

        //分页的数量控制
        var displayLength = 7;
        $scope.address = {
            loading: true,
            maxPage: 1,
            list: [],
            order: "DESC",
            orderIcon: "↓",
            assetName: "safe"
        };
        $scope.transaction = {
            loading: true,
            maxPage: 1,
            list: [],
            orderMoney: "DESC",
            orderMoneyIcon: "↓",
            orderTime: "DESC",
            orderTimeIcon: "↓",
            orderHeight: "DESC",
            orderHeightIcon: "↓",
            order: "Money",
            assetName: ""
        };
        // 初始化排序页面数据
        $scope.ranking = {
            loading: true,
            maxPage: 1,
            list: [],
        };

        $scope.assetNameList = [];
        var orderColumn = "Money";
        // address locked function start
        $scope.LockedAddressList = function (page, flag) {

            $scope.addressLockedTabClass = "active";
            $scope.addressLockedConentClass = "";
            $scope.txLockedListTabClass = "";
            $scope.txLockedListConentClass = "hideElement";
            $scope.balanceRankingTabClass = "";
            $scope.balanceRankingContentClass = "hideElement";

            if (flag == "orderBy") {
                thisAddressPage = page;
            } else if (flag == "assetSwitch") {
                if ($scope.thisAssetName == $scope.address.assetName) {
                    return;
                }
                thisAddressPage = page;
            } else {
                if (flag == "true") {
                    thisAddressPage = page;
                    if ($scope.thisAssetName == $scope.address.assetName) {
                        if ($scope.address.list.length > 0) {
                            return;
                        }
                    }
                } else {
                    if (page > $scope.address.maxPage) {
                        return;
                    } else if (page < 1) {
                        return;
                    } else if (thisAddressPage == page) {
                        return;
                    }
                    thisAddressPage = page;
                }
            }
            $scope.address.loading = true;
            $scope.address.list = [];
            $scope.address.assetName = $scope.thisAssetName;
            LockedAddress.get({
                assetName: $scope.thisAssetName,
                page: page,
                orderBy: $scope.address.order
            }, function (data) {
                $scope.address.pageBut = [];
                $scope.address.pageButM = [];

                $scope.address.list = data.list;
                $scope.address.more = data.more;
                $scope.address.maxPage = data.maxPage;
                $scope.address.maxPage = data.maxPage;
                $scope.totalLocked = data.totalLocked;
                setPageButs(page, data.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.address.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.address.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });

                $scope.address.loading = false;
                $scope.address.prePage = page - 1;
                $scope.address.nextPage = page + 1;

                isTransactionTable = false;
            })
        };


        $scope.jumpAddressPageBut = function () {
            if (jumpAddressPage > 0 && thisAddressPage != jumpAddressPage) {
                if (jumpAddressPage > $scope.address.maxPage) {
                    jumpAddressPage = parseInt($scope.address.maxPage);
                }
                $scope.LockedAddressList(jumpAddressPage);
            }
        };

        $scope.$watch('jumpAddressPage', function (page) {     //绑定控件元素值
            jumpAddressPage = parseInt(page) || 0;
            if (jumpAddressPage > $scope.address.maxPage) {
                window.document.getElementById("jumpAddressInput").value = $scope.address.maxPage;
            } else if (jumpAddressPage < 1) {
                if (window.document.getElementById("jumpAddressInput")) {
                    window.document.getElementById("jumpAddressInput").value = 1;
                }
            }
        });

        $scope.addressLockedOrder = function () {
            if ($scope.address.order == 'ASC') {
                $scope.address.order = 'DESC';
                $scope.address.orderIcon = '↓';
            } else {
                $scope.address.order = 'ASC';
                $scope.address.orderIcon = '↑';
            }
            $scope.LockedAddressList(1, "orderBy");
        };
        // address locked function end

        // transaction locked function start
        $scope.LockedTransactionList = function (page, flag) {
            $scope.txLockedListTabClass = "active";
            $scope.txLockedListConentClass = "";
            $scope.addressLockedTabClass = "";
            $scope.addressLockedConentClass = "hideElement";
            $scope.balanceRankingTabClass = "";
            $scope.balanceRankingContentClass = "hideElement";
           
            if (flag == "orderBy") {
                thisTransactionPage = page;
            } else if (flag == "assetSwitch") {//todo
                if ($scope.thisAssetName == $scope.transaction.assetName) {
                    return;
                }
                thisTransactionPage = page;
            } else {
                if (flag == "true") {
                    thisTransactionPage = page;
                    if ($scope.thisAssetName == $scope.transaction.assetName) {
                        if ($scope.transaction.list.length > 0) {
                            return;
                        }
                    }
                } else {
                    if (page > $scope.transaction.maxPage) {
                        return;
                    } else if (page < 1) {
                        return;
                    } else if (thisTransactionPage == page) {
                        return;
                    }
                    thisTransactionPage = page;
                }
            }
            $scope.transaction.list = [];

            $scope.transaction.loading = true;
            $scope.transaction.assetName = $scope.thisAssetName;
            LockedTransaction.get({
                assetName: $scope.thisAssetName,
                page: page,
                order: {
                    column: orderColumn,
                    order: $scope.transaction["order" + orderColumn]
                }
            }, function (data) {
                $scope.transaction.pageBut = [];
                $scope.transaction.pageButM = [];
                $scope.transaction.list = data.list;
                $scope.transaction.more = data.more;
                $scope.transaction.maxPage = data.maxPage;
                $scope.totalLocked = data.totalLocked;
                setPageButs(page, data.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.transaction.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.transaction.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });
                $scope.transaction.loading = false;
                $scope.transaction.prePage = page - 1;
                $scope.transaction.nextPage = page + 1;

                // $scope.addressLockedTabClass = "";
                // $scope.txLockedListTabClass = "active";
                //
                // $scope.addressLockedConentClass = "hideElement";
                // $scope.txLockedListConentClass = "";
                isTransactionTable = true;
            })
        };

        $scope.BalanceRankingList = function( page , flag ){
            // HIDE ADDRESS_LOCKED
            $scope.addressLockedTabClass = "";
            $scope.addressLockedConentClass = "hideElement";
            // HIDE TX_LOCKED_LIST
            $scope.txLockedListTabClass = "";
            $scope.txLockedListConentClass = "hideElement";
            // SHOW RANKING
            $scope.balanceRankingTabClass = 'active';
            $scope.balanceRankingContentClass = '';
            BalanceRanking.get( {
                page: page
            } , function( data ){
                $scope.ranking.pageBut = [];
                $scope.ranking.pageButM = [];
                $scope.ranking.list = data.list;
                $scope.ranking.more = data.more;
                $scope.ranking.maxPage = data.maxPage;
                setPageButs(page, data.maxPage, function (startPage, endPage) {
                    for (var i = startPage; i <= endPage; i++) {
                        $scope.ranking.pageBut.push({
                            num: i,
                            class: i == page ? "btn-default" : "btn-primary"
                        });
                        $scope.ranking.pageButM.push({
                            num: i,
                            class: i == page ? "click" : ""
                        });
                    }
                });
                $scope.ranking.loading = false;
                $scope.ranking.prePage = page - 1;
                $scope.ranking.nextPage = page + 1;
            } );
        }

        $scope.jumpRankingPageBut = function () {
            if (jumpRankingPage > 0 && thisRankingPage != jumpRankingPage) {
                if (jumpRankingPage > $scope.ranking.maxPage) {
                    jumpRankingPage = parseInt($scope.ranking.maxPage);
                }
                $scope.BalanceRankingList(jumpRankingPage);
            }
        };
        $scope.$watch('jumpRankingPage', function (page) {     //绑定控件元素值
            jumpRankingPage = parseInt(page) || 0;
            if (jumpRankingPage > $scope.ranking.maxPage) {
                window.document.getElementById("jumpRankingInput").value = $scope.ranking.maxPage;
            } else if (jumpRankingPage < 1) {
                if (window.document.getElementById("jumpRankingInput")) {
                    window.document.getElementById("jumpRankingInput").value = 1;
                }
            }
        });

        $scope.isNotSafeRanking = function(){
            return $scope.balanceRankingTabClass !== 'active';
        }

        /**
         * 跳转按钮
         */
        $scope.jumpTransactionPageBut = function () {
            if (jumpTransactionPage > 0 && thisTransactionPage != jumpTransactionPage) {
                if (jumpTransactionPage > $scope.transaction.maxPage) {
                    jumpTransactionPage = parseInt($scope.transaction.maxPage);
                }
                $scope.LockedTransactionList(jumpTransactionPage);
            }
        };

        $scope.$watch('jumpTransactionPage', function (page) {     //绑定控件元素值
            jumpTransactionPage = parseInt(page) || 0;
            if (jumpTransactionPage > $scope.transaction.maxPage) {
                window.document.getElementById("jumpTransactionInput").value = $scope.transaction.maxPage;
            } else if (jumpTransactionPage < 1) {
                if (window.document.getElementById("jumpTransactionInput")) {
                    window.document.getElementById("jumpTransactionInput").value = 1;
                }
            }
        });
        /**
         * 切换排序方式和排序的字段
         * @param order
         */
        $scope.transactionLockedOrder = function (order) {
            orderColumn = order;
            var keys = ['Height', 'Time', 'Money'];
            keys.forEach(function (v) {
                if (order != v) {
                    $scope.transaction["order" + v] = 'DESC';
                    $scope.transaction["order" + v + "Icon"] = '↓';
                } else {
                    if ($scope.transaction["order" + v] == 'ASC') {
                        $scope.transaction["order" + v] = 'DESC';
                        $scope.transaction["order" + v + "Icon"] = '↓';
                    } else {
                        $scope.transaction["order" + v] = 'ASC';
                        $scope.transaction["order" + v + "Icon"] = '↑';
                    }
                }
            });

            $scope.LockedTransactionList(1, "orderBy");
        };

        // transaction locked function end
        /**
         * 设置分页按钮的数量和格式
         * @param page
         * @param maxPage
         * @param cb
         */
        function setPageButs(page, maxPage, cb) {
            var startPage = Math.round(page - displayLength / 2 + 1);
            var endPage = Math.round(page + displayLength / 2);
            if (startPage <= 1) {
                startPage = 1;
                endPage = startPage + displayLength - 1;
                if (endPage >= maxPage - 1) {
                    endPage = maxPage - 1;
                }
            }
            if (endPage >= maxPage - 1) {
                endPage = maxPage;
                startPage = maxPage - displayLength + 1;
                if (startPage <= 1) {
                    startPage = 1;
                }
            }
            cb(startPage, endPage);
        }

        /**
         * 将数据格式化到8位小数
         * @param num
         * @return {Number}
         */
        $scope.formatNumber = function (num) {
            return parseFloat(parseFloat(num).toFixed(8));
        };

        $scope.formatNumber8 = function( num ){
            return  parseFloat(parseFloat(
                parseFloat(num) / Math.pow( 10 ,8 )
            ).toFixed(8));
        }

        // locked asset table start
        // 资产搜索和备选切换
        $scope.$watch("assetSearch", function (value) {
            if (value && value.length > 0) {
                $scope.thisAssetName = value;
            } else {
                $scope.thisAssetName = "safe";
            }
            var now = new Date().getTime();
            if (firstGetAssetNameTime < (now - 30 * 60 * 1000 )) {    //如果第一次获取锁定资产名称的时候超过半个小时
                $scope.getAssetNameList("");     //获取新的
            } else {
                $scope.assetNameList = [];
                if (value)
                    value = value.toUpperCase();
                allAssetNameList.forEach(function (v) {  //循环已得到的资产名称
                    if (v.name.toUpperCase().indexOf(value) >= 0) {   //判断资产名称是否包含输入的名称
                        $scope.assetNameList.push(v);
                    }
                })
            }
        });

        /**
         * 根据已知条件搜索相应的资产名称
         * @param name
         */
        $scope.getAssetNameList = function (name) {
            firstGetAssetNameTime = new Date().getTime();
            LockedAssetName.get({
                assetName: name
            }, function (list) {
                $scope.assetNameList = list.list;
                $scope.assetNameList.unshift({name: "safe"});
                allAssetNameList = $scope.assetNameList;
            });
        };
        /**
         * 点击资产搜索到的资产名称将当前的名称放入input中
         * @param name
         */
        $scope.assetNameClick = function (name) {
            // $scope.thisAssetName = name;
            window.document.getElementById("assetNameInput").value = name;
            window.document.getElementById("assetNameInputTow").value = name;
        };

        /**
         * 点击搜索资产时，根据当前显示的界面切换数据
         */
        $scope.searchAssetNameBtn = function () {

            $scope.thisAssetName = window.document.getElementById("assetNameInput").value;
            // window.document.getElementById("assetNameInputTow").value = name;

            var assetName = "";
            $scope.assetNameList.forEach(function (t) { //点击搜索时判断是否是一个完整的资产名称
                if (t.name == $scope.thisAssetName) {
                    assetName = t.name
                }
            });
            if (assetName == "") {    //如不是，得到当前列表中第一个资产为搜索条件
                $scope.thisAssetName = $scope.assetNameList[0].name;
                window.document.getElementById("assetNameInput").value = $scope.thisAssetName;
                window.document.getElementById("assetNameInputTow").value = $scope.thisAssetName;
            }
            if (isTransactionTable) {
                $scope.LockedTransactionList(1, "assetSwitch");
            } else {
                $scope.LockedAddressList(1, "assetSwitch");
            }
        };

        // pc show or hide asset name list div start
        $scope.showAssetSearchDiv = function () {
            window.document.getElementById("assetNameDiv").style.display = "block";
        };

        $scope.hideAssetSearchDiv = function () {
            window.document.getElementById("assetNameDiv").style.display = "none";
        };

        window.document.getElementById("assetNameInput").onblur = function () {
            setTimeout(function () {
                if(window.document.getElementById("assetNameDiv"))
                    window.document.getElementById("assetNameDiv").style.display = "none";
            }, 1000)
        };
        // pc show or hide asset name list div end

        // mobile show or hide asset name list div start
        $scope.showAssetSearchDivMobile = function () {
            window.document.getElementById("assetNameDivMobile").style.display = "block";
        };

        $scope.hideAssetSearchDivMobile = function () {
            window.document.getElementById("assetNameDivMobile").style.display = "none";
        };

        window.document.getElementById("assetNameInputTow").onblur = function () {
            setTimeout(function () {
                if(window.document.getElementById("assetNameDivMobile"))
                    window.document.getElementById("assetNameDivMobile").style.display = "none";
            }, 1000)
        }
        // mobile show or hide asset name list div end

        // locked asset table end
    });