'use strict';
angular.module('insight.masternode').controller('MastrtnodeController',
    function ($scope, $rootScope, $routeParams, $location, Global, MasterNode, updateMatterNodeStatus) {
        var timerPage = 1;
        // 检测平台的方法
        var isMobile = true;
        var jumpPage = 0;
        var thisPage = 0;
        var displayLength = 7;
        $scope.count = "";
        $scope.loading = true;
        var followNodeArray = [];
        var followNodeMap = {};
        var dataBase = {};

        if (window.intervalName) {
            clearInterval(window.intervalName);
        }

        /***** 弄饼 */
        var piechart = echarts.init(document.getElementById('piechart')); //div 标签id
        function buildPieChart( rateCount ) {
            var title_subtext = JSON.stringify(rateCount);
            var legend_data = Object.keys( rateCount );
            var series_data = [];
            for( var name in rateCount ){
                series_data.push({
                    name:name ,
                    value: rateCount[name],
                })     
            }
            option = {
                title: {
                    text: 'SAFE网络主节点状态分布图(总节点数' + $scope.count + ')',
                    subtext: title_subtext,
                    left: 'center'
                },
                tooltip: {
                    trigger: 'item',
                    formatter: '{a} <br/>{b} : {c} ({d}%)'
                },
                legend: {
                    orient: 'vertical',
                    left: 'left',
                    data: legend_data
                },
                series: [
                    {
                        name: '节点状态',
                        type: 'pie',
                        radius: '55%',
                        center: ['50%', '60%'],
                        data: series_data,
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                             },
                            normal:{
                                color:function(params) {
                                //自定义颜色
                                var colorList = [          
                                        'green',
                                        '#8dc1a9',
                                        '#2f4554',
                                        '#e69d87',
                                        '#ea7e53',
                                        '#eedd78',
                                ];
                                return colorList[params.dataIndex]
                                }
                            }
                        }
                    }
                ]
            };
            piechart.setOption(option);
          }
        //////////////////////////////



        $scope.judgeNotMobile = function () {   //如果mobile打开，不会执行此方法
            var system = {
                win: false,
                mac: false,
                xll: false
            };
            //检测平台
            var p = navigator.platform;
            system.win = p.indexOf("Win") == 0;
            system.mac = p.indexOf("Mac") == 0;
            system.x11 = (p == "X11") || (p.indexOf("Linux") == 0);

            if (!system.win && !system.mac && !system.xll) {  // 如果不是pc端
                if (window.isApp) {
                    $location.path("masterNodeApp/");
                } else {
                    $location.path("masterNodeMobile/");
                }
            }
            createDatabase(); //创建数据库实例
            isMobile = false;
            $scope.list(1);
        };

        function detectionApp() {
            window.android.isApp();
            window.webkit.messageHandlers.iosDeleteFollowMasterNode.postMessage(JSON.stringify(node));
            return true;
        }

        // web database start code
        var createDatabase = function () {
            var request = window.indexedDB.open('safeDB', 1);
            request.onsuccess = function () {
                dataBase = request.result;
                selectAll();
            };
            request.onerror = function () {
                console.log("创建或者打开数据库失败！" + request.error);
            };
            request.onupgradeneeded = function () {
                dataBase = request.result;
                /*var FollowMasterNode = */
                dataBase.createObjectStore("FollowMasterNode", {keyPath: "id"});
            }
        };

        $scope.insert = function (node) {
            var transaction = dataBase.transaction('FollowMasterNode', "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            followNodeMap[node.address] = {
                address: node.address,
                ip: node.ip,
                status: node.status
            };

            var saveRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });

            saveRequest.onerror = function () {
                console.log("error 存储 FollowMasterNode:" + JSON.stringify(node));
                removeMasterNodeFunc(node);
                judgmentHasBeenConcerned($scope.masternode);
            };
            mobileAddMasterNodeCallback(node);
        };

        $scope.delete = function (node) {
            var transaction = dataBase.transaction("FollowMasterNode", "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            delete followNodeMap[node.address];
            var deleteRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });
            deleteRequest.onerror = function (e) {
                console.log("Error delete record:", e);
                mobileAddMasterNodeCallback(node);
            };
            removeMasterNodeFunc(node);
            if ($scope.isFollow == true) {
                $scope.judgeIsFollow(thisPage);
            } else {
                $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
            }
        };

        function updateMasterNode(node) {
            var transaction = dataBase.transaction('FollowMasterNode', "readwrite");
            var objectStore = transaction.objectStore("FollowMasterNode");
            followNodeMap[node.address] = node;

            var updateRequest = objectStore.put({
                id: "list",
                value: followNodeMap
            });
            setFollowNodeArray(followNodeMap);
            updateRequest.onerror = function (e) {
                console.log("Error delete record:", e);
            };
        }

        function selectAll() {
            var transaction = dataBase.transaction('FollowMasterNode', "readonly");
            var objectStore = transaction.objectStore("FollowMasterNode");
            var saveRequest = objectStore.get("list");
            saveRequest.onerror = function (event) {
                console.log(event);
            };
            saveRequest.onsuccess = function () {
                var result = saveRequest.result;
                if (result) {
                    setFollowNodeArray(result.value);
                    $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
                    updateFollowMasterNodeStatus(Object.keys(result.value));
                }
            }
        }

        var setFollowNodeArray = function (result) {  //只对刚获取的数据库数据和更新数据使用,其他不用
            followNodeArray = [];
            followNodeMap = result;
            var keys = Object.keys(followNodeMap);
            for (var i = 0; i < keys.length; i++) {
                followNodeArray.push(followNodeMap[keys[i]]);
            }
        };

        var removeMasterNodeFunc = function (node) {
            followNodeArray.forEach(function (n, i) {
                if (n.address == node.address) {
                    followNodeArray.remove(i);
                }
            });
        };

        //添加关注节点的回调
        var mobileAddMasterNodeCallback = function (node) {
            followNodeArray.push(node);
            $scope.masternode = judgmentHasBeenConcerned($scope.masternode);
        };

        //更新关注节点信息
        var judgmentHasBeenConcerned = function (list) {
            if (list)
                list.forEach(function (n) {
                    n.beforeFollow = false;
                    followNodeArray.forEach(function (fn) {
                        if (fn.address == n.address) {
                            if (fn.status != n.status) {
                                //如果状态被改变，则更新数据库中的数据
                                updateMasterNode(n);
                            }
                            n.beforeFollow = true;
                        }
                    })
                });
            return list;
        };

        // 处理分页 和跳转显示问题
        $scope.judgeIsFollow = function (page) {
            if ($scope.isFollow) {
                $scope.followNode(page);
            } else {
                $scope.list(page);
            }
            thisPage = page;
        };

        $scope.showRate = function(){
            var option = {
                pageNum: 1,
                params: ""
            };
            getMasterNode(option , function(){
                 // 将数据适配为饼状图需要的数据.
                buildPieChart( $scope.rateCount );
                $scope.MasterNodeRateTabClass = 'active';
                $scope.MasterNodeListTabClass = '';
                $scope.followNodeListTabClass = '';
            });
        }

        // 调用获取所有主节点的方法
        $scope.list = function (page) { //默认显示所有
            if (page > 1) {
                if (page > $scope.maxPage && $scope.MasterNodeListTabClass == "active") {
                    return;
                } else if (thisPage == page && $scope.MasterNodeListTabClass == "active") {
                    return;
                }
            } else if (page < 1) {
                return;
            }
            timerPage = page;
            var option = {
                pageNum: page,
                params: $scope.searchParams || ""
            };
            getMasterNode(option , function(){
                $scope.MasterNodeListTabClass = "active";
                $scope.MasterNodeRateTabClass = "";
                $scope.followNodeListTabClass = "";
            });
        };

        // 获取关注的节点
        $scope.followNode = function (page) {
            if (page > 1) {
                if (page > $scope.maxPage && $scope.followNodeListTabClass == "active") {
                    return;
                } else if (thisPage == page && $scope.followNodeListTabClass == "active") {
                    return;
                }
            } else if (page < 1) {
                return;
            }
            $scope.masternode = [];
            thisPage = page;
            for (var i = (page - 1) * 10; i < page * 10; i++) {
                if (followNodeArray[i]) {
                    $scope.masternode.push(followNodeArray[i]);
                }
            }
            $scope.more = followNodeArray.length / 10 > page;
            $scope.prePage = page - 1;
            $scope.nextPage = page + 1;
            $scope.isFollow = true;
            var maxPage = Math.ceil(followNodeArray.length / 10);
            $scope.maxPage = maxPage;
            $scope.pageBut = [];
            setPageButs(page, maxPage);

            $scope.MasterNodeListTabClass = "";
            $scope.MasterNodeRateTabClass = "";
            $scope.followNodeListTabClass = "active";
        };

        // 设置分页按钮
        function setPageButs(page, maxPage) {
            var startPage = Math.round(page - displayLength / 2 + 1);
            var endPage = Math.round(page + displayLength / 2);
            if (startPage <= 1) {
                startPage = 1;
                endPage = startPage + displayLength - 1;
                if (endPage >= maxPage - 1) {
                    endPage = maxPage - 1;
                }
            }
            if (endPage >= maxPage - 1) {
                endPage = maxPage;
                startPage = maxPage - displayLength + 1;
                if (startPage <= 1) {
                    startPage = 1;
                }
            }
            for (var i = startPage; i <= endPage; i++) {
                $scope.pageBut.push({
                    num: i,
                    class: i == page ? "btn-default" : "btn-primary"
                });
            }
        }

        /**
         * 获取所有主节点信息
         * @param option
         */
        var getMasterNode = function (option , callback ) {
            var page = option.pageNum;
            thisPage = page;
            MasterNode.get({
                pageNum: option.pageNum,
                params: option.params
            }, function (masternode) {
                $scope.pageBut = [];
                $scope.pageButM = [];
                $scope.rate = masternode.rate;
                $scope.more = masternode.more;
                $scope.count = masternode.listLength;
                $scope.maxPage = masternode.maxPage;
                setPageButs(page, masternode.maxPage);
                $scope.loading = false;
                $scope.prePage = page - 1;
                $scope.nextPage = page + 1;
                $scope.masternode = judgmentHasBeenConcerned(masternode.list);
                $scope.isFollow = false;
                $scope.rateCount = masternode.rateCount;

                if (callback){
                    callback();
                }
            })
        };

        $scope.searchFunc = function () {   //搜索
            timerPage = 1;
            $scope.searchParams = $scope.searchValue;
            var option = {
                params: $scope.searchValue,
                pageNum: 1
            };
            getMasterNode(option);
        };

        $scope.$watch('search', function (searchValue) { //绑定控件元素值
            $scope.searchValue = searchValue;
        });

        window.intervalName = setInterval(function () {
            var option = {
                pageNum: timerPage,
                params: $scope.searchParams || ""
            };
            if ($scope.MasterNodeListTabClass == "active") {
                getMasterNode(option);
            }
        }, 60 * 1000);

        $scope.$watch('jumpPage', function (page) { //绑定控件元素值
            jumpPage = parseInt(page) || 0;
            if (jumpPage > $scope.maxPage) {
                window.document.getElementById("jumpInput").value = $scope.maxPage;
            } else if (jumpPage < 1) {
                window.document.getElementById("jumpInput").value = 1;
            }
        });

        $scope.jumpPageBut = function () {
            if (jumpPage > 0 && thisPage != jumpPage) {
                if (jumpPage > $scope.maxPage) {
                    jumpPage = parseInt($scope.maxPage);
                }
                $scope.judgeIsFollow(jumpPage);
            }
        };

        var updateFollowMasterNodeStatus = function (addresses) {
            updateMatterNodeStatus.get({addresses: addresses}, function (data) {
                data = data.data;
                var keys = Object.keys(data);
                keys.forEach(function (key) {
                    if (data[key].address == followNodeMap[key].address) {
                        if (data[key].status != followNodeMap[key].status) {
                            updateMasterNode(data[key]);
                        }
                    }
                });
            });
        }
    }
);